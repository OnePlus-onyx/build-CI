name: Build root sys armhf

on: 
  push:
    branches:
      - rootfs


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install Core Packages
      run: |
        sudo apt update && sudo apt install debootstrap neofetch -y && neofetch
        sudo apt-get install qemu-user-static -y

    - name: Download Rootfs
      run: |
        mkdir rootfs
        #wget http://cdimage.ubuntu.com/ubuntu-base/releases/18.04/release/ubuntu-base-18.04.1-base-armhf.tar.gz
        #sudo tar -xpf  ./ubuntu-base-18.04.1-base-armhf.tar.gz -C  ./rootfs
        wget http://cdimage.ubuntu.com/ubuntu-base/releases/focal/release/ubuntu-base-20.04-base-armhf.tar.gz
        sudo tar -xpf  ./ubuntu-base-20.04-base-armhf.tar.gz -C  ./rootfs
        ls -l ./rootfs
        sudo cp /usr/bin/qemu-arm-static ./rootfs/usr/bin/
        sudo cp /usr/bin/qemu-aarch64-static ./rootfs/usr/bin/
        sudo cp -b /etc/resolv.conf  ./rootfs/etc/resolv.conf
        chmod +x ./chroot.sh
        


####NOTE: 18--> guacamole  / 20 --> anbox
        
    - name: Building anbox
      run: |       
        sudo cp -b /etc/resolv.conf  ./rootfs/etc/resolv.conf 
        ./chroot.sh
        #sudo chroot ./rootfs printf '%s' ' contrib' | sudo tee -a ./rootfs/etc/apt/sources.list
        sudo chroot ./rootfs apt update
        sudo chroot ./rootfs apt install -y anbox
        #sudo chroot ./rootfs apt install -y init-system-helpers iptables libboost-filesystem1.71.0 \
        #                                    libboost-iostreams1.71.0 libboost-log1.71.0 libboost-program-options1.71.0 libboost-thread1.71.0 \
        #                                    libc6 libegl1 libgcc-s1 libgles2 liblxc1 libprotobuf-lite17 libsdl2-2.0-0 libsdl2-image-2.0-0 \
        #                                    libstdc++6 libsystemd0 lxc libprotobuf-lite23 libsdl2-2.0-0  
        #wget http://ports.ubuntu.com/pool/multiverse/a/anbox/anbox_0.0~git20191115-1build1_armhf.deb
        #sudo cp anbox_0.0~git20191115-1build1_armhf.deb  ./rootfs
        #sudo chroot ./rootfs dpkg -i /anbox_0.0~git20191115-1build1_armhf.deb
        
    - name: Building guacamole
      continue-on-error: true
      run: |        
        ./chroot.sh
        sudo cp -b /etc/resolv.conf  ./rootfs/etc/resolv.conf 
        sudo chroot ./rootfs apt update
        #sudo chroot ./rootfs apt install -y guacamole
        
        cd rootfs/mnt
        wget https://downloads.apache.org/guacamole/1.1.0/source/guacamole-server-1.1.0.tar.gz
        tar xzf guacamole-server-1.1.0.tar.gz
        rm guacamole-server-1.1.0.tar.gz 
        cp install_guacamole.sh ./rootfs
        chmod +x ./rootfs/install_guacamole.sh
        ./chroot.sh
        sudo chroot ./rootfs /bin/bash ./install_guacamole.sh    
     
#     - name: test
#       run: |
#           # Install tmate on macOS or Ubuntu
#           echo Setting up tmate...
#           if [ -x "$(command -v brew)" ]; then
#             brew install tmate > /tmp/brew.log
#           fi
#           if [ -x "$(command -v apt-get)" ]; then
#             curl -fsSL git.io/tmate.sh | bash
#           fi
#           [ -e ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
#           echo Running tmate...
#           tmate -S /tmp/tmate.sock new-session -d
#           tmate -S /tmp/tmate.sock wait tmate-ready
#           # Print connection info
#           DISPLAY=1
#           while [ $DISPLAY -le 120 ]; do
#             echo ________________________________________________________________________________
#             echo To connect to this session copy-n-paste the following into a terminal or browser:
#             tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
#             tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
#             [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
#             DISPLAY=$(($DISPLAY+1))
#             sleep 30
#           done
#           if [[ ! -z "$SLACK_WEBHOOK_URL" ]]; then
#             MSG=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
#             curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"\`$MSG\`\"}" $SLACK_WEBHOOK_URL
#           fi
#           # Wait for connection to close or timeout in 15 min
#           timeout=$((30*60))
#           while [ -S /tmp/tmate.sock ]; do
#             sleep 1
#             timeout=$(($timeout-1))
#             if [ ! -f /tmp/keepalive ]; then
#               echo ________________________________________________________________________________
#               echo To connect to this session copy-n-paste the following into a terminal or browser:
#               tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
#               tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
#               [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
#               if (( timeout < 0 )); then
#                 echo Waiting on tmate connection timed out!
#                 sudo init 0
#                 exit 0
#               fi
#             fi
#           done

      # Runs a set of commands using the runners shell
#     - name: Saving Rootfs
#       run: |
#         cd rootfs
#         sudo tar -czvf rootfs.tar.gz *
#         mv rootfs.tar.gz ../
#         cd ..
        
#     - name : Upload Rootfs
#       uses: actions/upload-artifact@master
#       with:
#         name: Rootfs
#         path: ./rootfs.tar.gz
