# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- azure-pipelines


# variables:
#   # DEBUG
#     system.debug: true

jobs:

- job: build

  pool:
    vmImage: 'ubuntu-16.04'
  timeoutInMinutes: 360


  steps:

  - script: |
        sudo apt-get update
        sudo apt-get install -y \
        openjdk-8-jdk android-tools-adb bc \
        bison build-essential curl flex g++-multilib m4 libxml2-utils \
        gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev \
        lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool \
        libncurses5-dev libsdl1.2-dev libssl-dev repo libwxgtk3.0-dev \
        libxml2 libxml2-utils lzop pngcrush rsync schedtool \
        squashfs-tools xsltproc yasm zip zlib1g-dev git
        sudo docker rmi `docker images -q`
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        mkdir -p ~/bin
        wget 'https://storage.googleapis.com/git-repo-downloads/repo' -P ~/bin
        chmod +x ~/bin/repo
        git config --global user.name "ittat"
        git config --global user.email "ittat@github.com"
        df -h
    displayName: ' Initialization environment'


  - script: |
        export DEVICE="onyx"
        export ANDROID_ROOT=~/work/halium
        export PATH=$PATH:~/bin/
        mkdir -p $ANDROID_ROOT
        cd $ANDROID_ROOT
        repo init -u https://github.com/Halium/android -b halium-9.0 --depth=1
        repo sync -j16 -c --no-clone-bundle --no-tags
        df -h
    displayName: 'Fetch source'

  - script: |
        export DEVICE="onyx"
        export ANDROID_ROOT=/home/runner/work/halium
        export PATH=$PATH:~/bin/
        sudo rm -r $ANDROID_ROOT/frameworks/base
        git clone https://github.com/YumeMichi/android_frameworks_base.git  -b lineage-16.0   $ANDROID_ROOT/frameworks/base --depth=1
        git clone https://github.com/YumeMichi/patcher.git  -b lineage-16.0   $ANDROID_ROOT/patcher --depth=1
        git clone https://github.com/OnePlus-onyx/device_oneplus_onyx.git  -b ut-9.0  $ANDROID_ROOT/device/oneplus/onyx --depth=1
        git clone https://github.com/LineageOS/android_device_oppo_common.git  -b lineage-16.0   $ANDROID_ROOT/device/oppo/common --depth=1
        git clone https://github.com/OnePlus-onyx/kernel_oneplus_onyx.git  -b ut-9.0 $ANDROID_ROOT/kernel/oneplus/onyx --depth=1
        git clone https://github.com/YumeMichi/vendor_oneplus_onyx.git  -b lineage-16.0-sultan  $ANDROID_ROOT/vendor/oneplus/onyx --depth=1
    displayName: 'Clone device spec source'

  - script: |
        export DEVICE="onyx"
        export ANDROID_ROOT=/home/runner/work/halium
        export PATH=$PATH:~/bin/
        cd $ANDROID_ROOT
        # replace something
        sed -i 's/external\/selinux/external\/selinux external\/libcurl/g' build/core/main.mk
        export LC_ALL=C
        chmod +x $ANDROID_ROOT/kernel/oneplus/onyx/scripts/gcc-wrapper.py
        source build/envsetup.sh
        export USE_CCACHE=1
        breakfast $DEVICE
        make -j$(nproc) mkbootimg
        make -j$(nproc) halium-boot
        make -j$(nproc) systemimage 
        echo "md5sum halium-boot.img and system.img"
        md5sum $ANDROID_ROOT/out/target/product/onyx/halium-boot.img
        md5sum $ANDROID_ROOT/out/target/product/onyx/system.img
    displayName: 'Clone device spec source'


  - script: |
      # Install tmate on macOS or Ubuntu

      echo Setting up tmate...
      if [ -x "$(command -v brew)" ]; then
        brew install tmate > /tmp/brew.log
      fi

      if [ -x "$(command -v apt-get)" ]; then
        curl -fsSL git.io/tmate.sh | bash
      fi
      [ -e ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
      echo Running tmate...
      tmate -S /tmp/tmate.sock new-session -d
      tmate -S /tmp/tmate.sock wait tmate-ready

      # Print connection info
      DISPLAY=1
      while [ $DISPLAY -le 3 ]; do
        echo ________________________________________________________________________________
        echo To connect to this session copy-n-paste the following into a terminal or browser:
        tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
        tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
        [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
        DISPLAY=$(($DISPLAY+1))
        sleep 30
      done

      if [[ ! -z "$SLACK_WEBHOOK_URL" ]]; then
        MSG=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
        curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"\`$MSG\`\"}" $SLACK_WEBHOOK_URL
      fi

      # Wait for connection to close or timeout in 15 min
      timeout=$((30*60))
      while [ -S /tmp/tmate.sock ]; do
        sleep 1
        timeout=$(($timeout-1))

        if [ ! -f /tmp/keepalive ]; then
          if (( timeout < 0 )); then
            echo Waiting on tmate connection timed out!
            sudo init 0
            exit 0
          fi
        fi
      done
    displayName:  tmate

