name: onyx_hot_patch
on: 
  repository_dispatch:
      types: 
      - onyx_hot_patch
#       - onyx_aosp_build

      
env:
  SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}} 
  image: ${{github.event.client_payload.image}}  
  work: /Volumes/${{github.event.client_payload.image}} 
  action_type: ${{ github.event.action }} 

jobs:   
  hot_patch:
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
    - name: Checkout
      uses: actions/checkout@v1       

    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        rm ${image}.dmg.sparseimage
        df -h
    - name: Initialization system environment
      run: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        
        ####brew
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install expect  gnu-sed ccache coreutils
        ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-9 /usr/local/bin/g++
        
        #####zstd
        git clone https://github.com/facebook/zstd.git
        cd zstd
        make
        sudo make install 
        
        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
        
        
    - name: Fetch Source
      run: |
        df -h
        git config --global user.name "ittat"
        git config --global user.email "ittat@github.com"
        cd ~
        rclone copy itd:ci/${image}/${image}.dmg.sparseimage.zst.complete ./
        mv ${image}.dmg.sparseimage.zst.complete ${image}.dmg.sparseimage.zst
        zstd --decompress  ${image}.dmg.sparseimage.zst
        sudo rm -r ./${image}.dmg.sparseimage.zst
        #####mount
        hdiutil attach /Users/runner/${image}.dmg.sparseimage -mountpoint ${work}
        df -h


    - name: hot patch
      run: |
        df -h
        cd ${work}/B2G/gonk-misc
        sudo rm -rf libcarthage
        git clone https://github.com/OnePlus-onyx/libcarthage -b test
        ls
        cd ${work}/B2G/hardware
        ls
        sudo rm -rf libhardware
        https://github.com/OnePlus-onyx/platform_hardware_libhardware -b onyx-test --depth=1
        mv platform_hardware_libhardware libhardware
        ls
        
    - name: B2G Build - Build Source include Gecko
      run: |
        df -h
        #### test build
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 70G
        /usr/local/bin/ccache -s
        export USE_CCACHE=1
        sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
        cd ${work}/B2G
        export DISABLE_SOURCES_XML=true
        export USE_PREBUILT_B2G=1
        export PREFERRED_B2G="${work}/pre-gecko/b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz"
        #cat .config
        #source build/envsetup.sh
        #lunch b2g_onyx-eng
        #mmm gonk-misc/libcarthage
        #rclone copy  ${work}/B2G/out/target/product/onyx/system/lib/libcarthage.so itd:ci/${image} 
        
        ./build.sh -j4 dist DIST_DIR=dist_output
        #./build/tools/releasetools/ota_from_target_files dist_output/b2g_onyx-target_files-eng.runner.zip onyx_b2g_ota_update.zip
        rclone copy ${work}/B2G/out/target/product/onyx/system.img itd:ci/${image} 
        
    - name: check error.log
      id: check
      run: |
        if [ -s ${work}/B2G/out/error.log ]; then
          echo Error!
          cat ${work}/B2G/out/error.log
          today=$(date +%Y-%m-%d)
          curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.error.${{steps.name.build.exitcode}} Error!"
          cd ~
          sleep 20
          hdiutil detach ${work}
          sudo rm -rf ${image}.dmg.sparseimage*
          df -h
          exit 2
        else
          exit 0
        fi

#     - name: Update b2g-ota
#       if:  github.event.action == 'onyx_b2g_build' 
#       run: |
#         ####
#         cd  ${work}/B2G
#         ls -al dist_output
#         ls out/target/product/onyx/system
#         ls out/target/product/onyx/system/b2g
        
#         ####
#         rclone copy onyx_b2g_ota_update.zip itd:ci/${image} 
        
    - name: reject image
      continue-on-error: true
      id: reject_img
      run: |
        cd ~
        touch ~/log.b2g
        sleep 20
        hdiutil detach ${work} > ~/log.b2g
        
    - name: reject image again
      continue-on-error: true
      id: reject_img_again
      if: steps.reject_img.conclusion == 'failure'
      run: |
        cd ~
        cat ~/log.b2g
        sleep 20
        hdiutil detach ${work} > ~/log.b2g
        
        
    - name: Update Build Source
      if: steps.check.conclusion == 'success'
      run: |
        sudo rm ~/${image}.dmg.sparseimage*
        df -h
            
   
#   gecko_build:
#     if: github.event.action == 'onyx_gecko_build'
#     runs-on: ubuntu-latest
#     timeout-minutes: 360
#     steps:
#     - name: Send Start Notify
#       run: |
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}} Start!"
#     - name: Initialization system environment
#       run: |
#         df -h
#         sudo apt install git make mercurial  yasm  libncurses5
#         wget http://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.bz2
#         tar xfj nasm-2.14.02.tar.bz2
#         cd nasm-2.14.02/
#         ./autogen.sh
#         ./configure --prefix=/usr/local/ 
#         make 
#         sudo make install
#         #hash -d nasm
#         nasm -v
#         cd ~
#         git config --global user.name "ittat"
#         git config --global user.email "ittat@github.com"
#         #curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#         #cargo install sccache
#         #ssh
#         mkdir -p ~/.ssh
#         echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#         chmod 600 ~/.ssh/id_rsa
#         #rclone
#         mkdir -p ~/.config/rclone
#         git clone git@github.com:ittat/tmp.git
#         cd tmp
#         mv ./rclone.conf ~/.config/rclone
#         brew install rclone
#         rclone ls itd:test
        
#     - uses: hecrj/setup-rust-action@v1
#       with:
#         rust-version: stable
#     - uses: actions/checkout@master
#     - name: Install sccache
#       run: cargo install sccache

#     - name: Fetch source
#       run: |
#         df -h
#         cd ~
#         rclone copy  itd:ci/${image}/b2g-sysroot.tar.zst ./
#         curl https://packages.preprod.kaiostech.com/ndk/v2/mozbuild.tar.bz2 -o mozbuild.tar.bz2
#         tar -xvf mozbuild.tar.bz2
#         tar -C "$HOME/.mozbuild" -I zstd -x -a -f b2g-sysroot.tar.zst
#         sudo rm b2g-sysroot.tar.zst
#         sudo rm mozbuild.tar.bz2
#         cd ~
#         git clone https://github.com/kaiostech/gecko-b2g -b gonk --depth=1
#         #git clone https://github.com/ittat/gecko-b2g-1 -b gonk --depth=1
#         df -h
        
#     - name: Bootstrap Gecko
#       run: |
#         df -h
#         cd ~/gecko-b2g
#         export SHELL=/bin/bash
#         export LOCAL_NDK_BASE_URL='ftp://ftp.kaiostech.com/ndk/android-ndk'
#         ./mach bootstrap --no-interactive --application-choice 'GeckoView/Firefox for Android'
#         df -h
       
#     - name: Build Gecko for onyx
#       run: |
#         df -h
#         cd ~/gecko-b2g
#         export SHELL=/bin/bash
#         export GONK_PATH=${HOME}/.mozbuild/b2g-sysroot
#         export GONK_PRODUCT_NAME=onyx
#         export GECKO_OBJDIR=${GONK_PATH}/objdir-onyx-gecko
#         export PLATFORM_VERSION=29
#         export TARGET_ARCH=arm
#         export TARGET_ARCH_VARIANT=armv7-a-neon
#         export TARGET_CPU_VARIANT=krait
#         export MOZ_DISABLE_LTO=1
#         ./build-b2g.sh
#         ./build-b2g.sh package
#         df -h
#         ls ${GECKO_OBJDIR}/dist
         
#     - name: Upload Artifact
#       if: github.event.action == 'gecko_build'
#       uses: actions/upload-artifact@master
#       with:
#         name: b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz
#         path: ~/.mozbuild/b2g-sysroot/objdir-onyx-gecko/dist/b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz

#     - name: Upload to Gdrive
#       run: |
#         df -h
#         cd ~/.mozbuild/b2g-sysroot/objdir-onyx-gecko/dist
#         rclone copy ./b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz itd:ci/${image} 
#         df -h
           
#     - name: Send Done Notify && Send onyx_b2g_build
#       run: |
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}:onyx-build-gecko PASS!"
#         curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "onyx_b2g_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
