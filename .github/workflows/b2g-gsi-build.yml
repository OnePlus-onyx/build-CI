name: b2g-gsi
on: 
#   push:
#     branches: b2g-gsi
#   schedule:
#     - cron: '0 23 */5 * *'
  repository_dispatch:
      types: 
      - gsi_repack_aosp
      - gsi_aosp_build
      - gsi_gecko_build
      - gsi_b2g_build
      - gsi_api_daemon_build
      
env:
  SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}} 
  image: ${{github.event.client_payload.image}}  
  PROIMAGE: ${{github.event.client_payload.image}} 
  work: /Volumes/${{github.event.client_payload.image}} 
  action_type: ${{ github.event.action }} 

jobs: 
  Download:
    if: github.event.action == 'gsi_repack_aosp'
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        rm ${image}.dmg.sparseimage*
        df -h

    - name: Initialization system environment
      run: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-9 /usr/local/bin/g++
        ####zstd
        #/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install zstd  
        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #####rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
        
        ####mount
        cd /Users/runner
        hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 400g ~/${image}.dmg
        ls
        hdiutil attach /Users/runner/${image}.dmg.sparseimage -mountpoint ${work}
           
    - name: Fetch source
      run: |
        df -h
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        cd ${work}
        git clone https://github.com/ittat/B2G -b ittat-patch-gsi  --depth=1 
        cd ./B2G
        echo Download ...
        REPO_INIT_FLAGS="--depth=1" REPO_SYNC_FLAGS=" -j128 --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune" ./config.sh phhgsi_arm_ab
        df -h

    - name: Fix soucre
      run: | 
        df -h   
        ####
        echo apply patch
        cd ${work}/B2G
        chmod +x ./patcher/patcher.sh 
        ./patcher/patcher.sh 
        
        ####
        cd ${work}/B2G
        sed -i '' '14d'  system/sepolicy/tests/Android.bp
        sed -i '' '65i\'$'\n\"10\.15\"\,\n' build/soong/cc/config/x86_darwin_host.go
      
        ####
        cd ${work}
        cp B2G/gonk-misc/Android.mk ./Android.mk.gonk.old
        cp B2G/gonk-misc/api-daemon/Android.mk ./Android.mk.api-daemon.old
        
        export CI_WORK=${work}
        cd ~
        git clone https://github.com/OnePlus-onyx/build-CI -b b2g
        sudo chmod +x ~/build-CI/patch-b2g-aosp.sh
        ~/build-CI/patch-b2g-aosp.sh
        
        cd ${work}
        cp B2G/gonk-misc/Android.mk ./Android.mk.gonk.patch
        cp B2G/gonk-misc/api-daemon/Android.mk ./Android.mk.api-daemon.patch
        
        ####
        cd ${CI_WORK}/B2G
        sudo rm -rf .repo
        df -h
        
    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        df -h
        
    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        df -h
        
    - name: Compress Soucre
      run: |
        cd ~
        zstd ${image}.dmg.sparseimage
        rm ${image}.dmg.sparseimage
        ls -al ${image}.dmg.sparseimage*
        
    - name: Uplaod Source 
      run: |
        df -h
        rclone copy ~/${image}.dmg.sparseimage.zst itd:ci/${image}
        sudo rm -rf ${image}.dmg.sparseimage.zst
        df -h
        
    - name: Send "gsi_aosp_build" WebHook          
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_aosp_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
   
   
  aosp_build:
    if: github.event.action == 'gsi_aosp_build' || github.event.action == 'gsi_b2g_build' 
    runs-on: macos-latest
    #runs-on: macos-11.0
    timeout-minutes: 360
    steps:
#     - name: Send Start Notify To Telegram
#       run: |
#         echo ${outversion}
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion} Start!"

    - name: Checkout
      uses: actions/checkout@v1       

    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        rm ${image}.dmg.sparseimage*
        df -h

    - name: Initialization system environment
      run: |
        df -h
        #####
        echo "::set-env name=RELEASE_REF::b2g_onyx_$(date +%Y-%m-%d)"
        
        ####
        more /System/Library/CoreServices/SystemVersion.plist
        ls /Applications/Xcode_*
        sudo xcode-select --switch /Applications/Xcode_11.app/Contents/Developer
        
        ####brew
        #/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install expect  gnu-sed ccache coreutils zstd gcc perl cpanm unzip

        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
        #rclone -v
        
        

        
    - name: Fetch Source
      run: |
        df -h
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        cd ~
        rclone copy itd:ci/${image}/${image}.dmg.sparseimage.zst ./
        zstd --decompress  ${image}.dmg.sparseimage.zst
        sudo rm -r ./${image}.dmg.sparseimage.zst
        #####mount
        hdiutil attach /Users/runner/${image}.dmg.sparseimage -mountpoint ${work}
        df -h

    - name: fix
      continue-on-error: true
      run: |
         cd ${work}/B2G/gonk-misc
         sudo rm -r api-daemon
         git clone https://github.com/ittat/api-daemon -b ittat-patch-without-api-daemon
         cd ${work}
         #sudo rm -rf ./B2G/gonk-misc/api-daemon/Android.mk
         #cp ./Android.mk.api-daemon.patch B2G/gonk-misc/api-daemon/Android.mk 
         
         ####pre-api-daemon
         export LOCAL_NDK_BASE_URL='ftp://ftp.kaiostech.com/ndk/android-ndk'
         cd ${work}/B2G/gecko
         ./mach python2.7 python/mozboot/mozboot/android.py --ndk-only --no-interactive
         
        
#         cd ${work}/B2G/system
#         rm -r ./vold
#         git clone https://github.com/ittat/platform_system_vold -b ittat-patch-gsi
#         mv platform_system_vold vold
         
#          echo 111111111111111111111111111111111111
#          cd ${work}/B2G/device/phh
#          sudo rm -r treble
#          git clone https://github.com/ittat/device_phh_treble -b gonk-android-10.0
#          mv device_phh_treble treble

#         cd ${work}/B2G/system
#         rm -r ./netd
#         git clone https://github.com/ittat/platform_system_netd -b ittat-patch-gsi
#         mv platform_system_netd netd
        
#         cd ${work}/B2G/frameworks
#         rm -r ./base
#         git clone https://github.com/ittat/platform_frameworks_base -b ittat-patch-gsi
#         mv platform_frameworks_base base
        
    - name: Check The Previous “error.log”
      run: |
        if [ -d "${work}/B2G/out" ];then
          ls -al ${work}/B2G/out/error*
          echo "old error.log:"
          cat ${work}/B2G/out/error.log
          sudo rm ${work}/B2G/out/error.log
          touch ${work}/B2G/out/error.log
        fi
        
    - name: Build Source Without Gecko
      if: github.event.action == 'gsi_aosp_build'
      continue-on-error: true
      id: build
      run: |
        df -h
        ####
        cd ${work}
        sudo rm -rf ./B2G/gonk-misc/Android.mk
        cp ./Android.mk.gonk.patch B2G/gonk-misc/Android.mk 
        
        ####
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 20G
        /usr/local/bin/ccache -s
        export USE_CCACHE=1
        sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
        cd ${work}/B2G
        export DISABLE_SOURCES_XML=true
        #export SKIP_ABI_CHECKS=true
        gtimeout 275m ./build.sh -j16 systemimage
        #gtimeout 275m ./build.sh -j16
        #./build.sh -j4 vndk-test-sepolicy
        df -h
        
    - name: B2G Build - Build Source include Gecko
      if: github.event.action == 'gsi_b2g_build'
      run: |
        df -h
        ####
        cd ${work}
        sudo rm -rf ./B2G/gonk-misc/Android.mk
        cp ./Android.mk.gonk.old B2G/gonk-misc/Android.mk 
        
        #sudo rm -rf ./B2G/gonk-misc/api-daemon/Android.mk
        #cp ./Android.mk.api-daemon.old B2G/gonk-misc/api-daemon/Android.mk 

        ####
        cd ${work}
        mkdir pre-gecko
        cd pre-gecko
        rclone copy itd:ci/${image}/b2g-83.0a1.en-US.linux-androideabi-arm.tar.gz ./
          

        ####  build
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 20G
        /usr/local/bin/ccache -s
        export USE_CCACHE=1
        sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
        cd ${work}/B2G
        export DISABLE_SOURCES_XML=true
        export USE_PREBUILT_B2G=1
        export PREFERRED_B2G="${work}/pre-gecko/b2g-83.0a1.en-US.linux-androideabi-arm.tar.gz"
        ./build.sh -j16 systemimage
        
    - name: Check Current ”error.log“ Status
#       continue-on-error: true
      id: check
      run: |
        if [ -s ${work}/B2G/out/error.log ]; then
          echo Error!
          cat ${work}/B2G/out/error.log
          today=$(date +%Y-%m-%d)
          curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.error.${{steps.name.build.exitcode}} Error!"
          cd ~
          hdiutil detach ${work}
          sleep 20
          hdiutil detach ${work}
          sudo rm -rf ${image}.dmg.sparseimage*
          df -h
          exit 211
        else
          exit 0
        fi
        
        
    - name: Repack “b2g-sysroot” for gsi
      id: sysroot
#       continue-on-error: true
      if: github.event.action == 'gsi_aosp_build' && steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        cd ~
        git clone https://github.com/OnePlus-onyx/build-CI -b b2g
        chmod +x ~/build-CI/create-b2g-sysroot.sh
        df -h
        cd ${work}/B2G
        cp ~/build-CI/create-b2g-sysroot.sh ./
        pip3 install zstandard
        pip install zstandard
        export TARGET_ARCH=arm
        export TARGET_ARCH_VARIANT=armv7-a-neon
        export TARGET_CPU_VARIANT=generic
        export GONK_PRODUCT_NAME=phhgsi_arm_ab
        #gecko/taskcluster/scripts/misc/create-b2g-sysroot.sh
        ./create-b2g-sysroot.sh
        ls -al
        sudo rm -rf ./b2g-sysroot
        ls -al
        mv b2g-sysroot.tar.zst ${work}
        df -h

    - name: Upload “b2g-sysroot”
#       continue-on-error: true
      if:  github.event.action == 'gsi_aosp_build' && steps.sysroot.conclusion == 'success' &&  steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        cd ${work}
        rclone copy b2g-sysroot.tar.zst itd:ci/${image}
        sudo rm b2g-sysroot.tar.zst

    - name: Repack “api-sysroot” for gsi 
      id: gsi_sysroot
#       continue-on-error: true
      if: github.event.action == 'gsi_aosp_build' && steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        df -h
        cd ${work}/B2G
        chmod +x ~/build-CI/api_sysroot.sh
        cp ~/build-CI/api_sysroot.sh ./
        pip3 install zstandard
        pip install zstandard
        export TARGET_ARCH=arm
        export TARGET_ARCH_VARIANT=armv7-a-neon
        export TARGET_CPU_VARIANT=generic
        export GONK_PRODUCT_NAME=phhgsi_arm_ab
        ./api_sysroot.sh
        sudo rm -rf ./api-sysroot
        ls -al
        mv api-sysroot.tar.zst ${work}
        df -h

    - name: Upload “api-sysroot”
#       continue-on-error: true
      if:  github.event.action == 'gsi_aosp_build' && steps.sysroot.conclusion == 'success' &&  steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        cd ${work}
        rclone copy api-sysroot.tar.zst itd:ci/${image}
        sudo rm api-sysroot.tar.zst


    - name: Update b2g-gsi  !!!!
      if:  github.event.action == 'gsi_b2g_build' 
      continue-on-error: true
      run: |
        ####   ####
        cd  ${work}
        #TODO
        zip -r img.zip B2G/out/target/product/phhgsi_arm_ab/system.img
        mv img.zip ~
        cd ~
        rclone copy img.zip itd:ci/${image}
        xz -c  B2G/out/target/product/phhgsi_arm_ab/system.img > ~/system.img.xz
        cd ~
        rclone copy system.img.xz itd:ci/${image}
        
 
    
    - name: Upload img.zip artifact
      if: github.event.action == 'gsi_b2g_build' 
      uses: actions/upload-artifact@master
      with:
        name: img.zip
        path: ~/img.zip
        
    - name: Upload system.img.xz artifact
      continue-on-error: true
      if: github.event.action == 'gsi_b2g_build' 
      uses: actions/upload-artifact@master
      with:
        name: system.img.xz
        path: ~/system.img.xz
 
    - name: Create Release
      id: create_release
      if: github.event.action == 'gsi_b2g_build'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_REF }}
        #release_name: release_${{ env.RELEASE_REF }}
        draft: false
        prerelease: false
        body: |
          # Release Notes
          gsi_arm_ab - system.img.xz

    - name: Update Release Asset - system & boot
      continue-on-error: true
      if: github.event.action == 'gsi_b2g_build'
      uses: actions/upload-release-asset@v1.0.1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /Users/runner/system.img.xz
          asset_name: system.img.xz
          asset_content_type: application/x-xz

#     - name: Update Release Asset - onyx-ota
#       continue-on-error: true
#       if: github.event.action == 'onyx_b2g_build'
#       uses: actions/upload-release-asset@v1.0.1
#       env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: /Users/runner/onyx_b2g_ota_update.zip
#           asset_name: onyx_b2g_ota_update.zip
#           asset_content_type: application/zip

    - name: Reject Build Image
      continue-on-error: true
      id: reject_img
      run: |
        cd ~
        sleep 20
        hdiutil detach ${work}
        
    - name: Reject Build Image Again
      continue-on-error: true
      id: reject_img_again
      run: |
        cd ~
        sleep 20
        hdiutil detach ${work}

    - name: Compress Soucre
      if: steps.check.conclusion == 'success'
      run: |
        cd ~
        zstd ${image}.dmg.sparseimage
        df -h
               
    - name: Update Build Source
      if: steps.check.conclusion == 'success'
      run: |
        df -h
        cd ~
        rclone copy ./${image}.dmg.sparseimage.zst itd:ci/${image}
        sudo rm  -rf ./${image}.dmg.sparseimage.zst
        ls -al ${image}.dmg.sparseimage*
        sudo rm ${image}.dmg.sparseimage*
        df -h
            
    - name: Send "gsi_aosp_build" WebHook Again
      if: github.event.action == 'gsi_aosp_build' && steps.build.outcome == 'failure' && steps.build.conclusion == 'success'  &&  steps.check.conclusion == 'success'         
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_aosp_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches

    - name: Send Done Notify & Send "gsi_build_gecko" WebHook
      if: github.event.action == 'gsi_aosp_build' && steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
       #curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.exitcode.${{steps.name.build.exitcode}} Done!"
       curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_gecko_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
   
   
  gecko_build:
    if: github.event.action == 'gsi_gecko_build' || github.event_name == 'schedule' 
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
#     - name: Send Start Notify
#       run: |
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}} Start!"

#     - name: Set env
#       if: github.event_name == 'schedule' 
#       run: |
#         echo "::set-env name=PROIMAGE::b2g_onyx"
#         echo ${{ env.PROIMAGE }}
        
    - name: Initialization system environment
      run: |
        df -h
        #####
        echo "::set-env name=RELEASE_REF::b2g-core_gsi_$(date +%Y-%m-%d)"

        sudo apt install git make mercurial  yasm  libncurses5 libfuse-dev
        wget http://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.bz2
        tar xfj nasm-2.14.02.tar.bz2
        rm nasm-2.14.02.tar.bz2
        cd nasm-2.14.02/
        ./autogen.sh
        ./configure --prefix=/usr/local/ 
        make 
        sudo make install
        nasm -v
        cd ../
        rm -r nasm-2.14.02/
        
        ####
        cd ~
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        #ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        #sudo apt install rclone
        brew install rclone
        #rclone -v
        rclone ls itd:test
        # yarn
        #sudo apt-get install yarnpkg
        yarn
        #sudo ln -snf /usr/bin/yarnpkg /usr/bin/yarn

    - name: clean disk
      #continue-on-error: true
      run: |
        df -h
        echo ————————————————————————————————————
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt remove -y 'php.*'
        sudo apt-get remove -y '^ghc-8.*'
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get autoremove -y
        sudo apt-get clean
        sudo rm -rf /etc/mysql 
        echo "Removing large directories"
        # deleting 15GB
        rm -rf /usr/share/dotnet/
        df -h
        
        
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: Install sccache
      run: cargo install sccache

    - name: Fetch Source
      run: |
        df -h
        cd ~
        curl https://packages.preprod.kaiostech.com/ndk/v3/mozbuild.tar.bz2 -o mozbuild.tar.bz2
        tar -xvf mozbuild.tar.bz2
        sudo rm mozbuild.tar.bz2
        cd ~
        git clone https://github.com/kaiostech/gecko-b2g -b gonk --depth=1
        #git clone https://github.com/ittat/gecko-b2g-1 -b ittat-patch-2 --depth=1
        #mv gecko-b2g-1 gecko-b2g
        df -h
        
    - name: Bootstrap Gecko
      run: |
        df -h
        cd ~/gecko-b2g
        export SHELL=/bin/bash
        export LOCAL_NDK_BASE_URL='ftp://ftp.kaiostech.com/ndk/android-ndk'
        ./mach bootstrap --no-interactive --application-choice 'GeckoView/Firefox for Android'
        df -h
       
    - name: Build Gecko for gsi
      run: |
        df -h
        ####
        cd ~
        git clone https://github.com/OnePlus-onyx/build-CI -b b2g
        chmod +x ~/build-CI/build-gsi-b2g.sh
        cp ~/build-CI/build-gsi-b2g.sh ~/gecko-b2g
        
        rclone copy  itd:ci/${{ env.PROIMAGE }}/b2g-sysroot.tar.zst ./
        tar -C "$HOME/.mozbuild" -I zstd -x -a -f b2g-sysroot.tar.zst
        
        mkdir ~/objdir-gsi-gecko
        tar -C "$HOME/objdir-gsi-gecko" -I zstd -x -a -f b2g-sysroot.tar.zst
        ls ~/objdir-gsi-gecko
        
        sudo rm b2g-sysroot.tar.zst
        
        cd ~/gecko-b2g
        export SHELL=/bin/bash
        export GONK_PATH=${HOME}/.mozbuild/b2g-sysroot
        export GONK_PRODUCT_NAME=phhgsi_arm_ab
        export GECKO_OBJDIR=${HOME}/objdir-gsi-gecko
        export PLATFORM_VERSION=29
        export TARGET_ARCH=arm
        export TARGET_ARCH_VARIANT=armv7-a-neon
        export TARGET_CPU_VARIANT=generic
        export MOZ_DISABLE_LTO=1
        ./build-gsi-b2g.sh
        ./build-gsi-b2g.sh package
        df -h
        ls ${GECKO_OBJDIR}/dist
      
    - name: Get Gecko Version
      run: |
        cd ~/gecko-b2g
        echo `cat browser/config/version.txt`
        export version=`cat browser/config/version.txt`
        echo "::set-env name=B2G_OUT::b2g-${version}.en-US.linux-androideabi-arm.tar.gz"

    - name: Upload Artifact
#       if: github.event_name == 'schedule'
      uses: actions/upload-artifact@master
      with:
        name: ${{ env.B2G_OUT }}
        path: ~/objdir-gsi-gecko/dist/${{ env.B2G_OUT }}

    - name: Upload to Gdrive
      run: |
        df -h
        cd ~/objdir-gsi-gecko/dist
        rclone copy ${{ env.B2G_OUT }} itd:ci/${{ env.PROIMAGE }}
        df -h

    - name: Create Release
      if: github.event_name != 'schedule'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: gecko_${{ env.RELEASE_REF }}
        #release_name: release_${{ env.RELEASE_REF }}
        draft: false
        prerelease: false
        body: |
          # Release Notes
          ${{ env.B2G_OUT }}

    - name: Update Release Asset 
      if: github.event_name != 'schedule'
      continue-on-error: true
      uses: actions/upload-release-asset@v1.0.1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/objdir-gsi-gecko/dist/${{ env.B2G_OUT }}
          asset_name: ${{ env.B2G_OUT }}
          asset_content_type: application/gzip

    - name: Send "api-daemon_build" WebHook
      if: github.event.action == 'gsi_gecko_build'
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_api_daemon_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
  
#     - name: Send Done Notify 
#       run: |
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}:onyx-build-gecko PASS!"


  api-daemon_build:
    if: github.event.action == 'gsi_api_daemon_build'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
#     - name: Send Start Notify
#       run: |
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}} Start!"

    - name: Initialization system environment
      run: |
        df -h
        sudo apt install git make gcc g++ libfuse-dev
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        #ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
        
#     - name: clean disk
#       #continue-on-error: true
#       run: |
#         df -h
#         echo ————————————————————————————————————
#         sudo rm -rf "/usr/local/share/boost"
#         sudo rm -rf "$AGENT_TOOLSDIRECTORY"
#         sudo apt remove -y 'php.*'
#         sudo apt-get remove -y '^ghc-8.*'
#         sudo apt-get remove -y '^dotnet-.*'
#         sudo apt-get autoremove -y
#         sudo apt-get clean
#         sudo rm -rf /etc/mysql 
#         echo "Removing large directories"
#         # deleting 15GB
#         rm -rf /usr/share/dotnet/
#         df -h
        
    - name: Download Source
      run: |
        cd ~
        ####
        rustup target add aarch64-linux-android armv7-linux-androideabi
        cd ~
        curl https://packages.preprod.kaiostech.com/ndk/v3/mozbuild.tar.bz2 | tar -C ${HOME}/ -xj
        rclone copy  itd:ci/${{ env.PROIMAGE }}/api-sysroot.tar.zst ./
        mkdir ~/.mozbuild/api-sysroot
        tar -C "$HOME/.mozbuild/api-sysroot" -I zstd -x -a -f api-sysroot.tar.zst
        #sudo rm api-sysroot.tar.zst
        #sudo rm mozbuild.tar.bz2
        ls ~/.mozbuild/api-sysroot
        
        cd ~
        git clone https://github.com/kaiostech/api-daemon --depth=1
        ls -al

    - name: build Source
      run: |
        ####
        #RUST_TARGET := armv7-linux-androideabi
        #RUST_TARGET := aarch64-linux-android
        
        export TARGET_ARCH=armv7-linux-androideabi
        export BUILD_WITH_NDK_DIR=~/.mozbuild/android-ndk-r20b-canary
        export GONK_DIR=~/.mozbuild/api-sysroot
        export GONK_PRODUCT=phhgsi_arm_ab
        cd ~/api-daemon
        ./update-prebuilts.sh
        
    - name: Upload Artifact
      continue-on-error: true
      uses: actions/upload-artifact@master
      with:
        name: gsi_arm_ab_api-daemon_prebuilts
        path: ~/api-daemon/prebuilts

    - name: Send Done Notify && Send "gsi_b2g_build" WebHook
      run: |
        today=$(date +%Y-%m-%d)
        #curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}:onyx-kernel-gecko PASS!"
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_b2g_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches

