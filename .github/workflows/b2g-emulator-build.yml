name: b2g-emulator-build
on: 
  schedule:
    - cron: '0 23 */3 * *'
  repository_dispatch:
      types: 
      - emulator_repack_aosp
      - emulator_build_aosp
      - emulator_build_gecko
      
env:
  SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}} 
  image: ${{github.event.client_payload.image}}  
  work: /Volumes/${{github.event.client_payload.image}} 
  action_type: ${{ github.event.action }} 

jobs: 
  Download:
    if: github.event.action == 'emulator_repack_aosp' 
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        rm ${image}.dmg.sparseimage
        df -h
    - name: Initialization system environment
      run: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-9 /usr/local/bin/g++
        ####mount
        cd /Users/runner
        hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 350g ~/${image}.dmg
        ls
        hdiutil attach /Users/runner/${image}.dmg.sparseimage -mountpoint ${work}
        ####zstd
        #cd ~
        #git clone https://github.com/facebook/zstd.git
        #cd zstd
        #make
        #sudo make install   
        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #####rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
           
    - name: Fetch source
      run: |
        df -h
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        cd ${work}
        git clone https://github.com/b2gOS/B2G -b master  --depth=1 
        cd ./B2G
        echo Download ...
        REPO_INIT_FLAGS="--depth=1" REPO_SYNC_FLAGS=" -j128 --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune" ./config.sh emulator-10-x86_64
        df -h
        
    - name: Fix soucre
      run: |        
        ####
        cd ${work}/B2G
        sed -i '' '14d'  system/sepolicy/tests/Android.bp
        
        ####
        cd ~
        git clone https://github.com/OnePlus-onyx/build-CI -b b2g
        cd ${work}
        cp B2G/gonk-misc/Android.mk ./
        mv Android.mk Android.mk.old
        cd ${work}/B2G/gonk-misc
        git am ~/build-CI/0001-err.patch
        cp Android.mk  ${work}
        cd ${work}
        mv Android.mk Android.mk.patch
        
        ####
        cd  ${work}/B2G
        # Force compressing debug symbols
        cd build/soong
        git am ~/build-CI/0001-gz.patch
        
        ####
        df -h
        cd ${work}/B2G
        sudo rm -rf .repo
        df -h
           
    - name: Compress Soucre
      run: |
        hdiutil detach ${work}
        cd ~
        zstd ${image}.dmg.sparseimage
        rm ${image}.dmg.sparseimage
        ls -al ${image}.dmg.sparseimage*
        
    - name: Uplaod Source 
      run: |
        df -h
        rclone copy ~/${image}.dmg.sparseimage.zst itd:ci/${image}
        sudo rm -rf android.dmg.sparseimage.zst
        df -h
        
    - name: Send "emulator_build_aosp" WebHook          
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "emulator_build_aosp","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
   
   
  aosp_build:
    if: github.event.action == 'emulator_build_aosp'
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
    - name: Send Start Notify To Telegram
      run: |
        echo ${outversion}
        today=$(date +%Y-%m-%d)
        curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion} Start!"
     
    - name: Checkout
      uses: actions/checkout@v1       

    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        rm ${image}.dmg.sparseimage
        df -h
    - name: Initialization system environment
      run: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        
        ####brew
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install expect  gnu-sed ccache coreutils zstd
        ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-9 /usr/local/bin/g++
        
        #####zstd
        #git clone https://github.com/facebook/zstd.git
        #cd zstd
        #make
        #sudo make install 
        
        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
        
        
    - name: Fetch Source
      run: |
        df -h
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        cd ~
        rclone copy itd:ci/${image}/${image}.dmg.sparseimage.zst ./
        zstd --decompress  ${image}.dmg.sparseimage.zst
        sudo rm -r ./${image}.dmg.sparseimage.zst
        #####mount
        hdiutil attach /Users/runner/${image}.dmg.sparseimage -mountpoint ${work}
        df -h
        
    - name: Check The Previous “error.log”
      run: |
        if [ -d "${work}/B2G/out" ];then
          ls -al ${work}/B2G/out/error*
          echo "old error.log:"
          cat ${work}/B2G/out/error.log
          sudo rm ${work}/B2G/out/error.log
          touch ${work}/B2G/out/error.log
        fi
        
    - name: Build Source Without Gecko
      if: github.event.action == 'emulator_build_aosp'
      continue-on-error: true
      id: build
      run: |
        df -h
        ####
        cd ${work}
        sudo rm -rf ./B2G/gonk-misc/Android.mk
        cp ./Android.mk.patch B2G/gonk-misc/Android.mk 
        
        ####
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 20G
        /usr/local/bin/ccache -s
        export USE_CCACHE=1
        sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
        cd ${work}/B2G
        export DISABLE_SOURCES_XML=true
        gtimeout 275m ./build.sh -j4
        df -h
        
    - name: Check Current ”error.log“ Status
      id: check
      run: |
        if [ -s ${work}/B2G/out/error.log ]; then
          echo Error!
          cat ${work}/B2G/out/error.log
          today=$(date +%Y-%m-%d)
          curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.error.${{steps.name.build.exitcode}} Error!"
          cd ~
          hdiutil detach ${work}
          sleep 20
          hdiutil detach ${work}
          sudo rm -rf ${image}.dmg.sparseimage*
          df -h
          exit 211
        else
          exit 0
        fi
        
    - name: Repack “b2g-sysroot” for emulator 
      id: sysroot
      if: github.event.action == 'emulator_build_aosp' && steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        cd ~
        git clone https://github.com/OnePlus-onyx/build-CI -b b2g
        chmod +x ~/build-CI/package_emulator_sysroot.sh
        df -h
        cd ${work}/B2G
        cp ~/build-CI/package_emulator_sysroot.sh ./
        pip3 install zstandard
        pip install zstandard
        ./package_emulator_sysroot.sh
        sudo rm -rf ./b2g-sysroot
        ls -al
        mv b2g-sysroot.tar.zst ${work}
        df -h
    - name: Upload “b2g-sysroot”
      if:  github.event.action == 'emulator_build_aosp' && steps.sysroot.conclusion == 'success' &&  steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        cd ${work}
        rclone copy b2g-sysroot.tar.zst itd:ci/${image}
        sudo rm b2g-sysroot.tar.zst
        

    - name: Reject Build Image
      continue-on-error: true
      id: reject_img
      run: |
        cd ~
        sleep 20
        hdiutil detach ${work}
        
    - name: Reject Build Image Again
      continue-on-error: true
      id: reject_img_again
      run: |
        cd ~
        sleep 20
        hdiutil detach ${work}
    - name: Compress Soucre
      if: steps.check.conclusion == 'success'
      run: |
        cd ~
        zstd ${image}.dmg.sparseimage
        df -h
               
    - name: Update Build Source
      if: steps.check.conclusion == 'success'
      run: |
        df -h
        cd ~
        echo ${{github.event.action}}
        if [ ${{github.event.action}} == "emulator_build_b2g" ]; then
          mv ./${image}.dmg.sparseimage.zst ./${image}.dmg.sparseimage.zst.complete
          rclone copy ./${image}.dmg.sparseimage.zst.complete itd:ci/${image}
          sudo rm  -rf ./${image}.dmg.sparseimage.zst.complete
        else
          rclone copy ./${image}.dmg.sparseimage.zst itd:ci/${image}
          sudo rm  -rf ./${image}.dmg.sparseimage.zst
        fi
        ls -al ${image}.dmg.sparseimage*
        sudo rm ${image}.dmg.sparseimage
        df -h
            
    - name: Send "emulator_build_aosp" WebHook Again
      if: github.event.action == 'emulator_build_aosp' && steps.build.outcome == 'failure' && steps.build.conclusion == 'success'  &&  steps.check.conclusion == 'success'         
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "emulator_build_aosp","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
    - name: Send Done Notify & Send "emulator_build_gecko" WebHook
      if: github.event.action == 'emulator_build_aosp' && steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
       curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.exitcode.${{steps.name.build.exitcode}} Done!"
       curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "emulator_build_gecko","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
   
   
  gecko_build:
    if: github.event.action == 'emulator_build_gecko' || github.event_name == 'schedule' 
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
    - name: Send Start Notify
      run: |
        today=$(date +%Y-%m-%d)
        curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}} Start!"
    - name: Initialization system environment
      run: |
        df -h
        sudo apt install git make mercurial  yasm  libncurses5
        
        ####nasm
        wget http://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.bz2
        tar xfj nasm-2.14.02.tar.bz2
        cd nasm-2.14.02/
        ./autogen.sh
        ./configure --prefix=/usr/local/ 
        make 
        sudo make install
        #hash -d nasm
        nasm -v
        cd ../
        sudo rm -rf nasm-2.14.02
        sudo rm -rf nasm-2.14.02.tar.bz2
        
        ####git
        cd ~
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        
        ####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        sudo apt install rclone
        rclone ls itd:test
        
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: Install sccache
      run: cargo install sccache

    - name: Fetch Source
      run: |
        df -h
        cd ~
        rclone copy  itd:ci/${image}/b2g-sysroot.tar.zst ./
        curl https://packages.preprod.kaiostech.com/ndk/v2/mozbuild.tar.bz2 -o mozbuild.tar.bz2
        tar -xvf mozbuild.tar.bz2
        tar -C "$HOME/.mozbuild" -I zstd -x -a -f b2g-sysroot.tar.zst
        sudo rm b2g-sysroot.tar.zst
        sudo rm mozbuild.tar.bz2
        cd ~
        #git clone https://github.com/kaiostech/gecko-b2g -b gonk --depth=1
        git clone https://github.com/ittat/gecko-b2g-1 -b gonk --depth=1
        mv gecko-b2g-1 gecko-b2g
        df -h
        
    - name: Bootstrap Gecko
      run: |
        df -h
        cd ~/gecko-b2g
        export SHELL=/bin/bash
        export LOCAL_NDK_BASE_URL='ftp://ftp.kaiostech.com/ndk/android-ndk'
        ./mach bootstrap --no-interactive --application-choice 'GeckoView/Firefox for Android'
        df -h
       
    - name: Build Gecko for emulator
      run: |
        df -h
        cd ~/gecko-b2g
        export SHELL=/bin/bash
        export GONK_PATH=${HOME}/.mozbuild/b2g-sysroot
        export GONK_PRODUCT_NAME=generic_x86_64
        export GECKO_OBJDIR=${GONK_PATH}/objdir-emulator-gecko
        export PLATFORM_VERSION=29
        export TARGET_ARCH=x86_64
        export TARGET_ARCH_VARIANT=x86_64
        export TARGET_CPU_VARIANT=generic
        export BINSUFFIX=64
        export MOZ_DISABLE_LTO=1
        ./build-b2g.sh
        ./build-b2g.sh package
        ls ${GECKO_OBJDIR}/dist
         
    - name: Upload Artifact
      if: github.event_name == 'schedule'
      uses: actions/upload-artifact@master
      with:
        name: b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz
        path: ~/.mozbuild/b2g-sysroot/objdir-emulator-gecko/dist/b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz

    - name: Upload to Gdrive
      run: |
        df -h
        cd ~/.mozbuild/b2g-sysroot/objdir-emulator-gecko/dist
        rclone copy ./b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz itd:ci/${image} 
        df -h

    - name: Send Done Notify 
      run: |
        today=$(date +%Y-%m-%d)
        curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}:emulator-build-gecko PASS!"
