# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- azure-pipelines
variables:
  # DEBUG
    system.debug: true

jobs:

- job: build

  pool:
    vmImage: 'macOS-10.14'
  timeoutInMinutes: 420


  steps:

  - script: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install expect  gnu-sed ccache
        ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-9 /usr/local/bin/g++
        cd /Users/runner
        hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 250g ~/android.dmg
        hdiutil attach /Users/runner/android.dmg.sparseimage -mountpoint /Volumes/android
        df -h
    displayName: ' Initialization environment'


  - script: |
        df -h
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 100G
        /usr/local/bin/ccache -s
        #export CCACHE_COMPRESS=1
        export USE_CCACHE=1
        git config --global user.name "ittat"
        git config --global user.email "ittat@github.com"
        cd /Volumes/android
        curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -o repo
        chmod +x repo
        ./repo init -u git://github.com/ReB2GOS/manifests.git -b exp   --depth=1 
        ./repo sync  -j128   --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune 
    displayName: 'Fetch source'

  - script: |
        cd /Volumes/android
        #sed -i '' '65i\'$'\n\"10\.15\"\,\n' build/soong/cc/config/x86_darwin_host.go
        #cat ./build/soong/cc/config/x86_darwin_host.go 
        sed -i '' '14d'  system/sepolicy/tests/Android.bp
        cat system/sepolicy/tests/Android.bp
        sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
        df -h
        #sudo rm -r ./.repo
        #df -h
    displayName: 'fix source'


  - script: |
        df -h
        cd /Volumes/android/
        export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx6G" 
        source build/envsetup.sh
        lunch lemon_onyx-eng 
        make -j8
        df -h
    displayName: 'build source'

  # - script: |
  #     # Install tmate on macOS or Ubuntu

  #     echo Setting up tmate...
  #     if [ -x "$(command -v brew)" ]; then
  #       brew install tmate > /tmp/brew.log
  #     fi

  #     if [ -x "$(command -v apt-get)" ]; then
  #       curl -fsSL git.io/tmate.sh | bash
  #     fi
  #     [ -e ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
  #     echo Running tmate...
  #     tmate -S /tmp/tmate.sock new-session -d
  #     tmate -S /tmp/tmate.sock wait tmate-ready

  #     # Print connection info
  #     DISPLAY=1
  #     while [ $DISPLAY -le 3 ]; do
  #       echo ________________________________________________________________________________
  #       echo To connect to this session copy-n-paste the following into a terminal or browser:
  #       tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
  #       tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
  #       [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
  #       DISPLAY=$(($DISPLAY+1))
  #       sleep 30
  #     done

  #     if [[ ! -z "$SLACK_WEBHOOK_URL" ]]; then
  #       MSG=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
  #       curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"\`$MSG\`\"}" $SLACK_WEBHOOK_URL
  #     fi

  #     # Wait for connection to close or timeout in 15 min
  #     timeout=$((30*60))
  #     while [ -S /tmp/tmate.sock ]; do
  #       sleep 1
  #       timeout=$(($timeout-1))

  #       if [ ! -f /tmp/keepalive ]; then
  #         if (( timeout < 0 )); then
  #           echo Waiting on tmate connection timed out!
  #           sudo init 0
  #           exit 0
  #         fi
  #       fi
  #     done
  #   displayName:  tmate


  - script: |
        df -h
        ls -al /Volumes/android/B2G/out/target/product/onyx 
        /usr/local/bin/ccache -s
        cd ~
        hdiutil detach /Volumes/android
        df -h
    displayName: 'End'

