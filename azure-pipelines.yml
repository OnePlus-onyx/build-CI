# build b2g_x86_64 
# using prebuild aosp_emulator

#trigger:
#- azure-pipelines

jobs:

- job: build

  pool:
    vmImage: 'ubuntu-latest'
  timeoutInMinutes: 360


  steps:

  # - script: |
  #       df -h
  #       sudo apt install git make mercurial  yasm  libncurses5
  #       wget http://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.bz2
  #       tar xfj nasm-2.14.02.tar.bz2
  #       cd nasm-2.14.02/
  #       ./autogen.sh
  #       ./configure --prefix=/usr/local/ 
  #       make 
  #       sudo make install
  #       hash -d nasm
  #       nasm -v
  #       cd ~
  #       git config --global user.name "ittat"
  #       git config --global user.email "ittat@github.com"
  #       curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  #       cargo install sccache
  #   displayName: ' Initialization environment'


  # - script: |
  #       df -h
  #       cd ~
  #       wget https://firefoxci.taskcluster-artifacts.net/SqAWos4HSqSIZjNnf_yRxQ/0/public/build/b2g-sysroot.tar.zst
  #       ls
  #       curl https://packages.preprod.kaiostech.com/ndk/mozbuild.tar.bz2 -o mozbuild.tar.bz2
  #       tar -xvf mozbuild.tar.bz2
  #       ls -al 
  #       tar -C "$HOME/.mozbuild" -I zstd -x -a -f b2g-sysroot.tar.zst
  #       sudo rm b2g-sysroot.tar.zst
  #       sudo rm mozbuild.tar.bz2
  #       ls
  #       ls ./.mozbuild
  #       cd ~
  #       git clone https://github.com/kaiostech/gecko-b2g -b gonk --depth=1
  #       #hg clone https://hg.mozilla.org/projects/kaios gecko-b2g
  #       ls
  #       df -h
  #   displayName: 'Fetch source'



  # # - script: |
  # #     # Install tmate on macOS or Ubuntu
  # #     echo Setting up tmate...
  # #     if [ -x "$(command -v brew)" ]; then
  # #       brew install tmate > /tmp/brew.log
  # #     fi
  # #     if [ -x "$(command -v apt-get)" ]; then
  # #       curl -fsSL git.io/tmate.sh | bash
  # #     fi
  # #     [ -e ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
  # #     echo Running tmate...
  # #     tmate -S /tmp/tmate.sock new-session -d
  # #     tmate -S /tmp/tmate.sock wait tmate-ready
  # #     # Print connection info
  # #     DISPLAY=1
  # #     while [ $DISPLAY -le 3 ]; do
  # #       echo ________________________________________________________________________________
  # #       echo To connect to this session copy-n-paste the following into a terminal or browser:
  # #       tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
  # #       tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
  # #       [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
  # #       DISPLAY=$(($DISPLAY+1))
  # #       sleep 30
  # #     done
  # #     if [[ ! -z "$SLACK_WEBHOOK_URL" ]]; then
  # #       MSG=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
  # #       curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"\`$MSG\`\"}" $SLACK_WEBHOOK_URL
  # #     fi
  # #     # Wait for connection to close or timeout in 15 min
  # #     timeout=$((30*60))
  # #     while [ -S /tmp/tmate.sock ]; do
  # #       sleep 1
  # #       timeout=$(($timeout-1))
  # #       if [ ! -f /tmp/keepalive ]; then
  # #         if (( timeout < 0 )); then
  # #           echo Waiting on tmate connection timed out!
  # #           sudo init 0
  # #           exit 0
  # #         fi
  # #       fi
  # #     done
  # #   displayName:  tmate

  # - script: |
  #       df -h
  #       cd ~/gecko-b2g
  #       export SHELL=/bin/bash
  #       export LOCAL_NDK_BASE_URL='ftp://ftp.kaiostech.com/ndk/android-ndk'
  #       ./mach bootstrap --no-interactive --application-choice 'GeckoView/Firefox for Android'
  #       #./mach bootstrap --no-system-changes --no-interactive --application-choice mobile
  #       df -h
  #   displayName: 'bootstrap source'

  # - script: |
  #       df -h
  #       cd ~/gecko-b2g
  #       export SHELL=/bin/bash
  #       export GONK_PATH=${HOME}/.mozbuild/b2g-sysroot
  #       export GONK_PRODUCT_NAME=generic_x86_64
  #       export GECKO_OBJDIR=${GONK_PATH}/objdir-emulator-gecko
  #       export PLATFORM_VERSION=29
  #       export TARGET_ARCH=x86_64
  #       export TARGET_ARCH_VARIANT=x86_64
  #       export TARGET_CPU_VARIANT=generic
  #       export BINSUFFIX=64
  #       ./build-b2g.sh
  #       ./build-b2g.sh package
  #       df -h
  #       ls objdir-emulator-gecko/dist
  #   displayName: 'build source'


  # - script: |
  #       df -h

  #   displayName: 'End'
  
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)'
      includeRootFolder: true
      archiveType: '7z'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true
      verbose: true


