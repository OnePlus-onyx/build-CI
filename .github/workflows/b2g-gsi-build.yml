name: b2g-gsi
on: 
#   push:
#     branches: b2g-gsi
#   schedule:
#     - cron: '0 23 */5 * *'
  repository_dispatch:
      types: 
      - gsi_repack_aosp
      - gsi_aosp_build
      - gsi_gecko_build
      - gsi_b2g_build
      - gsi_api_daemon_build
#       - release
      
env:
  SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}} 
  image: ${{github.event.client_payload.image}}
  PROIMAGE: ${{github.event.client_payload.image}}_${{github.event.client_payload.device_name}}
  remotepath: ${{github.event.client_payload.image}}_${{github.event.client_payload.device_name}}
  work: /Volumes/${{github.event.client_payload.image}} 
  out_work: /Volumes/out
  out_path: /Volumes/out/B2G
  action_type: ${{ github.event.action }} 
  gecko_version:  ${{github.event.client_payload.gecko_version}} 
  device_name: ${{github.event.client_payload.device_name}} 
  device_arch: ${{github.event.client_payload.device_arch}} 
  systemimage: system.img.xz
  sourceimage: source
  outimage: out
  CloudPower: /Users/runner/CloudPower/gsi/
#phhgsi_arm64_a  
#phhgsi_arm64_ab
#phhgsi_arm_a 
#phhgsi_arm_ab  
#RUST_TARGET := armv7-linux-androideabi
#RUST_TARGET := aarch64-linux-android

jobs: 
  gsi_repack_aosp:
    if: github.event.action == 'gsi_repack_aosp'
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: link script
      continue-on-error: true
      run: |
        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        cd ~
        git clone git@github.com:ittat/CloudPower.git


    - name: Clean system environment
      working-directory: ${{ env.CloudPower }}
      continue-on-error: true
      run: |
        ./init/all_unmount_darwin.sh
        
        
    - name: Initialization system environment
      working-directory: ${{ env.CloudPower }}
      run: |
        ./init/docker_env_darwin.sh
        
        ####mount
        cd /Users/runner
        hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 100g ~/${sourceimage}.dmg
        ls
        hdiutil attach /Users/runner/${sourceimage}.dmg.sparseimage -mountpoint ${work}
           
    - name: Fetch source
      working-directory: ${{ env.CloudPower }}
      run: |
        df -h
        ./source/repo_source.sh
        df -h
        
    - name: Fix soucre
      working-directory: ${{ env.CloudPower }}
      run: | 
        df -h   
        ./source/fix_soucre.sh
        df -h
        

    - name: unmount docker
      working-directory: ${{ env.CloudPower }}
      continue-on-error: true
      run: |
        df -h
        ./init/all_unmount_darwin.sh
        df -h
        
        
    - name: Compress sourceimage Soucre
      working-directory: ${{ env.CloudPower }}
      run: |
        ./source/compress_sourceimage.sh
        
        
    - name: create sourceimage Soucre
      working-directory: ${{ env.CloudPower }}
      run: |
        ./source/create_outimage.sh
        
    - name: Uplaod Source 
      working-directory: ${{ env.CloudPower }}
      run: |
        ./source/uplaod_image.sh
        
    - name: Send "gsi_aosp_build" WebHook          
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_aosp_build","client_payload": {"image":"'${image}'", "gecko_version":"'${gecko_version}'", "device_name":"'${device_name}'","device_arch":"'${device_arch}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
   
  aosp_build:
    if: github.event.action == 'gsi_aosp_build' || github.event.action == 'gsi_b2g_build' 
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
      
    - name: Checkout
      uses: actions/checkout@v1   
          
    - name: link script
      continue-on-error: true
      run: |
        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        cd ~
        git clone git@github.com:ittat/CloudPower.git


    - name: Clean system environment
      working-directory: ${{ env.CloudPower }}
      continue-on-error: true
      run: |
        ./init/all_unmount_darwin.sh


    - name: Clean  environment
      if: github.event.action == 'gsi_aosp_build'
      working-directory: ${{ env.CloudPower }}
      run: |
        df -h
        ls 
        ./init/clean_space_darwin.sh
        
    - name: Initialization system environment
      working-directory: ${{ env.CloudPower }}
      run: |
        df -h
        ./init/docker_env_darwin.sh
      
            
    - name: Fetch Source
      working-directory: ${{ env.CloudPower }}
      run: |
        ./source/download_source.sh

 
    - name: fix
#       continue-on-error: true
      run: |
         cd ${work}/B2G/gonk-misc
         if [ -d "${work}/B2G/gonk-misc/api-daemon" ];then
          sudo rm -r ${work}/B2G/gonk-misc/api-daemon
         fi
         git clone https://github.com/ittat/api-daemon -b ittat-patch-without-api-daemon
         cd ${work}
         #sudo rm -rf ./B2G/gonk-misc/api-daemon/Android.mk
         #cp ./Android.mk.api-daemon.patch B2G/gonk-misc/api-daemon/Android.mk 
         
         brew install cpanm 
         sudo cpan LWP::UserAgent
         
         ####pre-api-daemon
         cd ~
         curl https://packages.preprod.kaiostech.com/ndk/v3/mozbuild.tar.bz2 -o mozbuild.tar.bz2
         tar -xvf mozbuild.tar.bz2
         sudo rm mozbuild.tar.bz2
         
         #cd ${work}/B2G/vendor
         #ls
         #sudo rm -r vndk-tests
         #git clone https://github.com/ittat/vendor_vndk-tests -b ittat-patch-mac
         #mv vendor_vndk-tests vndk-tests
         #echo vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
         #ls ${work}/B2G/out/host/darwin-x86/bin
         
        
    - name: Check The Previous “error.log”
      run: |
        if [ -d "${out_path}/error.log" ];then
          ls -al ${out_path}/error*
          echo "old error.log:"
          cat ${out_path}/error.log
          sudo rm ${out_path}/error.log
          touch ${out_path}/error.log
        fi
        
    - name: Build Source Without Gecko
      if: github.event.action == 'gsi_aosp_build'
      continue-on-error: true
      id: build
      run: |
        df -h
        ####
        cd ${work}
        sudo rm -rf ./B2G/gonk-misc/Android.mk
        cp ./Android.mk.gonk.patch B2G/gonk-misc/Android.mk 
        
        cd ${CloudPower}
        ./build/build_without_gecko.sh
        
    - name: Add prebuilt api daemon
#       continue-on-error: true
      if: github.event.action == 'gsi_b2g_build'
      run: |
        cd ${work}
        mkdir pre-api
        cd pre-api
        rclone copy itd:ci/${remotepath}/prebuilts.zip ./
        unzip ./prebuilts.zip
        APIDeamon_PreBuild="${work}/pre-api/home/runner/api-daemon/prebuilts"
        ls ${APIDeamon_PreBuild}
        
        ####
        TARGET_OUT=${out_path}/target/product/${device_name}/system
        path_api=${TARGET_OUT}/api-daemon
        if [ -d "${path_api}" ]; then
           sudo rm -r "${path_api}"
        fi
        
        path_b2g=${TARGET_OUT}/b2g
        if [ -d "${path_b2g}" ]; then
           sudo rm -r "${path_b2g}"
        fi
        
        mkdir -p ${path_api}
        mkdir -p ${path_b2g}/defaults
        
        cp -r  ${APIDeamon_PreBuild}/http_root  ${TARGET_OUT}/api-daemon
        cp ${APIDeamon_PreBuild}/${device_arch}/api-daemon ${TARGET_OUT}/bin
        chmod +x ${TARGET_OUT}/bin/api-daemon
        
        ##
        #DAEMON_ROOT=${work}/B2G/gonk-misc/api-daemon
        #cp ${DAEMON_ROOT}/daemon/config-device.toml  ${TARGET_OUT}/api-daemon/config.toml
        #cp ${DAEMON_ROOT}/vhost/cert.pem   ${TARGET_OUT}/b2g/defaults/local-cert.pem
        #cp ${DAEMON_ROOT}/vhost/key.pem   ${TARGET_OUT}/b2g/defaults/local-key.pem
        #cp ${DAEMON_ROOT}/services/devicecapability/devicecapability.json  ${TARGET_OUT}/b2g/defaults/devicecapability.json
        #cp ~/.mozbuild/android-ndk-r20b-canary/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/arm-linux-androideabi/libc++_shared.so ${TARGET_OUT}/lib

    - name: B2G Build - Build Source include Gecko
      if: github.event.action == 'gsi_b2g_build'
      run: |
        df -h
        ####
        cd ${work}
        sudo rm -rf ./B2G/gonk-misc/Android.mk
        cp ./Android.mk.gonk.old B2G/gonk-misc/Android.mk 
        
        #sudo rm -rf ./B2G/gonk-misc/api-daemon/Android.mk
        #cp ./Android.mk.api-daemon.old B2G/gonk-misc/api-daemon/Android.mk 
        ####
        cd ${work}
        mkdir pre-gecko
        cd pre-gecko
        rclone copy itd:ci/${remotepath}/${gecko_version} ./
          
        ####  build
        cd ${CloudPower}
        ./build/build_gecko.sh
        
    - name: Check Current ”error.log“ Status
#       continue-on-error: true
      id: check
      run: |
        if [ -s ${out_path}/error.log ]; then
          echo Error!
          cat ${out_path}/error.log
          today=$(date +%Y-%m-%d)
          #curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.error.${{steps.name.build.exitcode}} Error!"
          cd ~
          hdiutil detach ${work}
          sleep 20
          hdiutil detach ${out_work}
          #sudo rm -rf ${PROIMAGE}.dmg.sparseimage*
          df -h
          exit 211
        else
          exit 0
        fi
        
        
    - name: Repack “b2g-sysroot” for gsi
      id: sysroot
      working-directory: ${{ env.CloudPower }}
      if: github.event.action == 'gsi_aosp_build' && steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        ./build/repack_b2g-sysroot.sh
        
    - name: Upload “b2g-sysroot”
#       continue-on-error: true
      if:  github.event.action == 'gsi_aosp_build' && steps.sysroot.conclusion == 'success' &&  steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        cd ${work}
        rclone copy b2g-sysroot.tar.zst itd:ci/${remotepath}
        sudo rm b2g-sysroot.tar.zst
        
    - name: Repack “api-sysroot” for gsi 
      id: gsi_sysroot
      working-directory: ${{ env.CloudPower }}
      if: github.event.action == 'gsi_aosp_build' && steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
          ./build/repack_api-sysroot.sh
        
    - name: Upload “api-sysroot”
#       continue-on-error: true
      if:  github.event.action == 'gsi_aosp_build' && steps.sysroot.conclusion == 'success' &&  steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        cd ${work}
        rclone copy api-sysroot.tar.zst itd:ci/${remotepath}
        sudo rm api-sysroot.tar.zst
        
    - name: Update b2g-gsi  !!!!
      if:  github.event.action == 'gsi_b2g_build' 
      continue-on-error: true
      run: |
        ####   ####
        cd  ${work}
        #TODO
        #zip -r img.zip B2G/out/target/product/${device_name}/system.img
        #mv img.zip ~
        #cd ~
        #rclone copy img.zip itd:ci/${remotepath}
        cd  ${work}
        xz -c  B2G/out/target/product/${device_name}/system.img > ~/${systemimage}
        cd ~
        rclone copy system.img.xz itd:ci/${remotepath}
        
        
#     - name: Upload system.img.xz artifact
#       continue-on-error: true
#       if: github.event.action == 'gsi_b2g_build' 
#       uses: actions/upload-artifact@master
#       with:
#         name: system.img.xz
#         path: ~/system.img.xz


    - name: Clean system environment
      working-directory: ${{ env.CloudPower }}
      continue-on-error: true
      run: |
        ./init/all_unmount_darwin.sh
        
    - name: Send "gsi_build_gecko" WebHook
      if: github.event.action == 'gsi_aosp_build' && steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
       #curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.exitcode.${{steps.name.build.exitcode}} Done!"
       curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_gecko_build","client_payload": {"image":"'${image}'", "gecko_version":"'${gecko_version}'", "device_name":"'${device_name}'","device_arch":"'${device_arch}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
 
    - name: gsi_release WebHook
      if: github.event.action == 'gsi_b2g_build' 
      run: |
       #curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.exitcode.${{steps.name.build.exitcode}} Done!"
       curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_release","client_payload": {"image":"'${image}'", "gecko_version":"'${gecko_version}'", "device_name":"'${device_name}'","device_arch":"'${device_arch}'"}}'   https://api.github.com/repos/ittat/SuperBot/dispatches
   

    - name: Update Build Source
      if: steps.check.conclusion == 'success' &&  github.event.action == 'gsi_aosp_build' 
      run: |
        df -h
        cd ~
        rclone copy ./${outimage}.dmg.sparseimage itd:ci/${remotepath}
        sudo rm  -rf ./${outimage}.dmg.sparseimage
        df -h
            
    - name: Send "gsi_aosp_build" WebHook Again
      if: github.event.action == 'gsi_aosp_build' && steps.build.outcome == 'failure' && steps.build.conclusion == 'success'  &&  steps.check.conclusion == 'success'         
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_aosp_build","client_payload": {"image":"'${image}'", "gecko_version":"'${gecko_version}'", "device_name":"'${device_name}'","device_arch":"'${device_arch}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
  
   
  gecko_build:
    if: github.event.action == 'gsi_gecko_build' || github.event_name == 'schedule' 
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
#     - name: Send Start Notify
#       run: |
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}} Start!"

#     - name: Set env
#       if: github.event_name == 'schedule' 
#       run: |
#         echo "::set-env name=PROIMAGE::b2g_onyx"
#         echo ${{ env.PROIMAGE }}
        
    - name: Initialization system environment
      run: |
        df -h
        #####
        sudo apt install git make mercurial  yasm  libncurses5 libfuse-dev
        wget http://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.bz2
        tar xfj nasm-2.14.02.tar.bz2
        rm nasm-2.14.02.tar.bz2
        cd nasm-2.14.02/
        ./autogen.sh
        ./configure --prefix=/usr/local/ 
        make 
        sudo make install
        nasm -v
        cd ../
        rm -r nasm-2.14.02/
        
        ####
        cd ~
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        #ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        #sudo apt install rclone
        brew install rclone
        #rclone -v
        rclone ls itd:test
        # yarn
        #sudo apt-get install yarnpkg
        yarn
        #sudo ln -snf /usr/bin/yarnpkg /usr/bin/yarn
        
    - name: clean disk
      #continue-on-error: true
      run: |
        df -h
        echo ————————————————————————————————————
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt remove -y 'php.*'
        sudo apt-get remove -y '^ghc-8.*'
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get autoremove -y
        sudo apt-get clean
        sudo rm -rf /etc/mysql 
        echo "Removing large directories"
        # deleting 15GB
        rm -rf /usr/share/dotnet/
        df -h
        
        
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: Install sccache
      run: cargo install sccache

    - name: Fetch Source
      run: |
        df -h
        cd ~
        curl https://packages.preprod.kaiostech.com/ndk/v3/mozbuild.tar.bz2 -o mozbuild.tar.bz2
        tar -xvf mozbuild.tar.bz2
        sudo rm mozbuild.tar.bz2
        cd ~
        git clone https://github.com/kaiostech/gecko-b2g -b gonk 
        cd gecko-b2g
        git checkout -b 8adcdfd21c3dea054c31b2552c0c00e3517ebd7c 
        #git clone https://github.com/ittat/gecko-b2g-1 -b ittat-patch-2 --depth=1
        #mv gecko-b2g-1 gecko-b2g
        df -h
        
    - name: Bootstrap Gecko
      run: |
        df -h
        cd ~/gecko-b2g
        export SHELL=/bin/bash
        sudo apt update
        export LOCAL_NDK_BASE_URL='ftp://ftp.kaiostech.com/ndk/android-ndk'
        ./mach bootstrap --no-interactive --application-choice 'GeckoView/Firefox for Android'
        df -h
       
    - name: Build Gecko for gsi
      run: |
        df -h
        ####
        cd ~
        git clone https://github.com/OnePlus-onyx/build-CI -b b2g
        chmod +x ~/build-CI/build-gsi-b2g.sh
        cp ~/build-CI/build-gsi-b2g.sh ~/gecko-b2g
        
        rclone copy  itd:ci/${remotepath}/b2g-sysroot.tar.zst ./
        tar -C "$HOME/.mozbuild" -I zstd -x -a -f b2g-sysroot.tar.zst
        
        mkdir ~/objdir-gsi-gecko
        tar -C "$HOME/objdir-gsi-gecko" -I zstd -x -a -f b2g-sysroot.tar.zst
        ls ~/objdir-gsi-gecko
        
        sudo rm b2g-sysroot.tar.zst
        
        cd ~/gecko-b2g
        export SHELL=/bin/bash
        export GONK_PATH=${HOME}/.mozbuild/b2g-sysroot
        
        if [ "$device_arch" == "aarch64-linux-android" ]; then
          export TARGET_ARCH=arm64
          export TARGET_ARCH_VARIANT=armv8-a
        else
          export TARGET_ARCH=arm
          export TARGET_ARCH_VARIANT=armv7-a-neon
        fi
        
        export GONK_PRODUCT_NAME=${device_name}
        export GECKO_OBJDIR=${HOME}/objdir-gsi-gecko
        export PLATFORM_VERSION=29
        export TARGET_CPU_VARIANT=generic
        export MOZ_DISABLE_LTO=1
        ./build-gsi-b2g.sh
        ./build-gsi-b2g.sh package
        df -h
        ls ${GECKO_OBJDIR}/dist
      
    - name: Get Gecko Version
      run: |
        cd ~/gecko-b2g
        echo `cat browser/config/version.txt`
        export version=`cat browser/config/version.txt`
        
        if [ "$device_arch" == "aarch64-linux-android" ]; then
          TARGET_ARCH=aarch64
          ARCH_ABI="android"
        else
          TARGET_ARCH=arm
          ARCH_ABI="androideabi"
        fi
        echo "::set-env name=B2G_OUT::b2g-${version}.en-US.linux-${ARCH_ABI}-${TARGET_ARCH}.tar.gz"
        
    - name: Upload Artifact
#       if: github.event_name == 'schedule'
      uses: actions/upload-artifact@master
      with:
        name: ${{ env.B2G_OUT }}
        path: ~/objdir-gsi-gecko/dist/${{ env.B2G_OUT }}

    - name: Upload to Gdrive
      run: |
        df -h
        cd ~/objdir-gsi-gecko/dist
        rclone copy ${{ env.B2G_OUT }} itd:ci/${remotepath}
        df -h
        
    - name: Send "api-daemon_build" WebHook
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_api_daemon_build","client_payload": {"image":"'${image}'", "gecko_version":"'${B2G_OUT}'", "device_name":"'${device_name}'","device_arch":"'${device_arch}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
  
#     - name: Send Done Notify 
#       run: |
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}:onyx-build-gecko PASS!"


  api-daemon_build:
    if: github.event.action == 'gsi_api_daemon_build'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
#     - name: Send Start Notify
#       run: |
#         today=$(date +%Y-%m-%d)
#         curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}} Start!"

    - name: Initialization system environment
      run: |
        df -h
        sudo apt install git make gcc g++ libfuse-dev
        git config --global user.name "ci"
        git config --global user.email "ci@github.com"
        #ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
        
#     - name: clean disk
#       #continue-on-error: true
#       run: |
#         df -h
#         echo ————————————————————————————————————
#         sudo rm -rf "/usr/local/share/boost"
#         sudo rm -rf "$AGENT_TOOLSDIRECTORY"
#         sudo apt remove -y 'php.*'
#         sudo apt-get remove -y '^ghc-8.*'
#         sudo apt-get remove -y '^dotnet-.*'
#         sudo apt-get autoremove -y
#         sudo apt-get clean
#         sudo rm -rf /etc/mysql 
#         echo "Removing large directories"
#         # deleting 15GB
#         rm -rf /usr/share/dotnet/
#         df -h
        
    - name: Download Source
      run: |
        cd ~
        ####
        rustup target add aarch64-linux-android armv7-linux-androideabi
        cd ~
        curl https://packages.preprod.kaiostech.com/ndk/v3/mozbuild.tar.bz2 | tar -C ${HOME}/ -xj
        rclone copy  itd:ci/${remotepath}/api-sysroot.tar.zst ./
        mkdir ~/.mozbuild/api-sysroot
        tar -C "$HOME/.mozbuild/api-sysroot" -I zstd -x -a -f api-sysroot.tar.zst
        #sudo rm api-sysroot.tar.zst
        #sudo rm mozbuild.tar.bz2
        ls ~/.mozbuild/api-sysroot
        
        cd ~
        git clone https://github.com/kaiostech/api-daemon --depth=1
        ls -al
    - name: build Source
      run: |
        ####
        export TARGET_ARCH=${device_arch}
        export BUILD_WITH_NDK_DIR=~/.mozbuild/android-ndk-r20b-canary
        export GONK_DIR=~/.mozbuild/api-sysroot
        export GONK_PRODUCT=${device_name}
        cd ~/api-daemon
        ./update-prebuilts.sh
        
    - name: zip Artifact
      run: |
        cd ~
        zip -r ~/prebuilts.zip ~/api-daemon/prebuilts 
        rclone copy ~/prebuilts.zip itd:ci/${remotepath} 
        ls -al -h
        
    - name: Upload Artifact
      continue-on-error: true
      uses: actions/upload-artifact@master
      with:
        name: prebuilts.zip
        path: ~/prebuilts.zip

    - name: Send Done Notify && Send "gsi_all_b2g_build" WebHook
      run: |
        today=$(date +%Y-%m-%d)
        #curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}:onyx-kernel-gecko PASS!"
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gsi_b2g_build","client_payload": {"image":"'${image}'", "gecko_version":"'${gecko_version}'", "device_name":"'${device_name}'","device_arch":"'${device_arch}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
#   release:
#     if: github.event.action == 'release'
#     runs-on: ubuntu-latest
#     timeout-minutes: 360
#     steps:
      
#     - name: Initialization system environment
#       run: |
#         df -h
#         git config --global user.name "ci"
#         git config --global user.email "ci@github.com"
#         #ssh
#         mkdir -p ~/.ssh
#         echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#         chmod 600 ~/.ssh/id_rsa
#         #rclone
#         mkdir -p ~/.config/rclone
#         git clone git@github.com:ittat/tmp.git
#         cd tmp
#         mv ./rclone.conf ~/.config/rclone
#         brew install rclone
#         rclone ls itd:test
        
#         ####
#         echo "::set-env name=RELEASE_REF::b2g_${device_name}_$(date +%Y-%m-%d)"
#     - name: Download
#       run: |
#         pwd
#         rclone copy  itd:ci/${remotepath}/${systemimage} ./
#         rclone copy  itd:ci/${remotepath}/${gecko_version} ./
#         ls -al -h
        
        
#     - name: Create Release
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: ${{ env.RELEASE_REF }}
#         draft: false
#         prerelease: false
#         body: |
#           ## List
#           type: ${{ env.device_name }} 
#           systemimage - ${{ env.device_name }} - system.img.xz
#           b2g_core - ${{ env.device_arch }} - ${{ env.gecko_version }}
          
          
#     - name: Update Release Asset - system & boot
#       uses: actions/upload-release-asset@v1.0.1
#       env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: system.img.xz
#           asset_name: system.img.xz
#           asset_content_type: application/x-xz

          
#     - name: Update Release Asset 
#       uses: actions/upload-release-asset@v1.0.1
#       env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ${{ env.gecko_version }}
#           asset_name: ${{ env.gecko_version }}
#           asset_content_type: application/gzip
