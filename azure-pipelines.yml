# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- azure-pipelines


# variables:
#   # DEBUG
#     system.debug: true

jobs:

- job: build

  pool:
    vmImage: 'macOS-10.14'
  timeoutInMinutes: 360


  steps:

  - script: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install expect  gnu-sed ccache
        ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-9 /usr/local/bin/g++
        cd /Users/runner
        hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 210g ~/android.dmg
        hdiutil attach /Users/runner/android.dmg.sparseimage -mountpoint /Volumes/android
        cd  /Volumes/android
        git clone https://github.com/facebook/zstd.git
        cd zstd
        make
        sudo make install 
        df -h
    displayName: ' Initialization environment'



  - script: |
        df -h
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 70G
        /usr/local/bin/ccache -s
        #export CCACHE_COMPRESS=1
        export USE_CCACHE=1
        git config --global user.name "ittat"
        git config --global user.email "ittat@github.com"
        cd /Volumes/android
        git clone https://github.com/kaiostech/B2G -b master  --depth=1 
        cd ./B2G
        echo Download ...
        REPO_INIT_FLAGS="--depth=1" REPO_SYNC_FLAGS=" -j128 --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune" ./config.sh emulator-10-x86_64
        df -h
    displayName: 'Fetch source'

  - script: |
        cd /Volumes/android/B2G
        sed -i '' '14d'  system/sepolicy/tests/Android.bp
        cat system/sepolicy/tests/Android.bp
        #sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
        sudo rm -rf .repo
        sudo rm -r ./gecko
        #patch -d gonk-misc -p1 /Volumes/android/B2G/gecko/taskcluster/scripts/misc/gonk-misc.patch
        #patch -d build/soong -p1 /Volumes/android/B2G/gecko/taskcluster/scripts/misc/build_soong.patch
        cd  /Volumes/android
        tar -cvf ./B2G.tar ./B2G
        zstd ./B2G.tar
        ls -al -h ./
        df -h
    displayName: 'fix source'

# Publish per task NuGet package artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish per task NuGet package artifact
    inputs:
      pathToPublish: '/Volumes/android/B2G.tar.zst'
      artifactName: 'B2G.tar.zst'
      #publishLocation: container


  # - script: |
  #     # Install tmate on macOS or Ubuntu

  #     echo Setting up tmate...
  #     if [ -x "$(command -v brew)" ]; then
  #       brew install tmate > /tmp/brew.log
  #     fi

  #     if [ -x "$(command -v apt-get)" ]; then
  #       curl -fsSL git.io/tmate.sh | bash
  #     fi
  #     [ -e ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
  #     echo Running tmate...
  #     tmate -S /tmp/tmate.sock new-session -d
  #     tmate -S /tmp/tmate.sock wait tmate-ready

  #     # Print connection info
  #     DISPLAY=1
  #     while [ $DISPLAY -le 3 ]; do
  #       echo ________________________________________________________________________________
  #       echo To connect to this session copy-n-paste the following into a terminal or browser:
  #       tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
  #       tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
  #       [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
  #       DISPLAY=$(($DISPLAY+1))
  #       sleep 30
  #     done

  #     if [[ ! -z "$SLACK_WEBHOOK_URL" ]]; then
  #       MSG=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
  #       curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"\`$MSG\`\"}" $SLACK_WEBHOOK_URL
  #     fi

  #     # Wait for connection to close or timeout in 15 min
  #     timeout=$((30*60))
  #     while [ -S /tmp/tmate.sock ]; do
  #       sleep 1
  #       timeout=$(($timeout-1))

  #       if [ ! -f /tmp/keepalive ]; then
  #         if (( timeout < 0 )); then
  #           echo Waiting on tmate connection timed out!
  #           sudo init 0
  #           exit 0
  #         fi
  #       fi
  #     done
  #   displayName:  tmate

  # # - script: |
  # #       cd /Volumes/android/B2G
  # #       sed -i '' '14d'  system/sepolicy/tests/Android.bp
  # #       cat system/sepolicy/tests/Android.bp
  # #       sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
  # #       rm -rf .repo
  # #       patch -d gonk-misc -p1 /Volumes/android/B2G/gecko/taskcluster/scripts/misc/gonk-misc.patch
  # #       patch -d build/soong -p1 /Volumes/android/B2G/gecko/taskcluster/scripts/misc/build_soong.patch
  # #       df -h
  # #   displayName: 'fix source'






  # - script: |
  #       df -h
  #       ls -al /Volumes/android/B2G/out/target/product/onyx 
  #       ls  /Volumes/android/B2G/out/target/product/onyx/system
  #       /usr/local/bin/ccache -s
  #       cd ~
  #       hdiutil detach /Volumes/android
  #       df -h
  #   displayName: 'End'

