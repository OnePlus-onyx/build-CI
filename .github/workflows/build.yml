name: Build root sys armhf

on: 
  push:
    branches:
      - rootfs


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install Core Packages
      run: |
        sudo apt update && sudo apt install debootstrap neofetch -y && neofetch
        sudo apt-get install qemu-user-static -y

    - name: Download Rootfs
      run: |
        mkdir rootfs
        #wget http://cdimage.ubuntu.com/ubuntu-base/releases/18.04/release/ubuntu-base-18.04.1-base-armhf.tar.gz
        #sudo tar -xpf  ./ubuntu-base-18.04.1-base-armhf.tar.gz -C  ./rootfs
        wget http://cdimage.ubuntu.com/ubuntu-base/releases/focal/release/ubuntu-base-20.04-base-armhf.tar.gz
        sudo tar -xpf  ./ubuntu-base-20.04-base-armhf.tar.gz -C  ./rootfs
        ls -l ./rootfs
        sudo cp /usr/bin/qemu-arm-static ./rootfs/usr/bin/
        sudo cp /usr/bin/qemu-aarch64-static ./rootfs/usr/bin/
        sudo cp -b /etc/resolv.conf  ./rootfs/etc/resolv.conf
        chmod +x ./chroot.sh
        
#     - name: Building anbox
#       run: |        
#         ./chroot.sh
#         sudo chroot ./rootfs apt update
#         sudo chroot ./rootfs apt install -y anbox
        
    - name: Building Guacamole
      continue-on-error: true
      run: |        
        ./chroot.sh
        sudo chroot ./rootfs apt update
        sudo chroot ./rootfs apt install -y gcc g++ libcairo2-dev libjpeg-turbo8-dev libpng-dev libtool-bin libossp-uuid-dev libavcodec-dev libavutil-dev libswscale-dev freerdp2-dev libpango1.0-dev libssh2-1-dev libvncserver-dev libtelnet-dev libssl-dev libvorbis-dev libwebp-dev build-essential net-tools curl git software-properties-common tomcat9 tomcat9-admin tomcat9-common tomcat9-user       
        
    - name: Building Guacamole
      run: |    
        cd ./rootfs/tmp
        wget https://downloads.apache.org/guacamole/1.1.0/source/guacamole-server-1.1.0.tar.gz
        tar xzf guacamole-server-1.1.0.tar.gz
        ls
        rm guacamole-server-1.1.0.tar.gz
        cd ../../
        sudo chroot ./rootfs  /tmp/guacamole-server-1.1.0/configure --with-init-dir=/etc/init.d
        sudo chroot ./rootfs   cd /tmp/guacamole-server-1.1.0 \&\& make
        sudo chroot ./rootfs  cd /tmp/guacamole-server-1.1.0 && make install
        sudo chroot ./rootfs  cd /tmp/guacamole-server-1.1.0 && ldconfig
        
        
#     - name: test
#       run: |
#           # Install tmate on macOS or Ubuntu
#           echo Setting up tmate...
#           if [ -x "$(command -v brew)" ]; then
#             brew install tmate > /tmp/brew.log
#           fi
#           if [ -x "$(command -v apt-get)" ]; then
#             curl -fsSL git.io/tmate.sh | bash
#           fi
#           [ -e ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
#           echo Running tmate...
#           tmate -S /tmp/tmate.sock new-session -d
#           tmate -S /tmp/tmate.sock wait tmate-ready
#           # Print connection info
#           DISPLAY=1
#           while [ $DISPLAY -le 120 ]; do
#             echo ________________________________________________________________________________
#             echo To connect to this session copy-n-paste the following into a terminal or browser:
#             tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
#             tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
#             [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
#             DISPLAY=$(($DISPLAY+1))
#             sleep 30
#           done
#           if [[ ! -z "$SLACK_WEBHOOK_URL" ]]; then
#             MSG=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
#             curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"\`$MSG\`\"}" $SLACK_WEBHOOK_URL
#           fi
#           # Wait for connection to close or timeout in 15 min
#           timeout=$((30*60))
#           while [ -S /tmp/tmate.sock ]; do
#             sleep 1
#             timeout=$(($timeout-1))
#             if [ ! -f /tmp/keepalive ]; then
#               echo ________________________________________________________________________________
#               echo To connect to this session copy-n-paste the following into a terminal or browser:
#               tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
#               tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
#               [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
#               if (( timeout < 0 )); then
#                 echo Waiting on tmate connection timed out!
#                 sudo init 0
#                 exit 0
#               fi
#             fi
#           done

      # Runs a set of commands using the runners shell
#     - name: Saving Rootfs
#       run: |
#         cd rootfs
#         sudo tar -czvf rootfs.tar.gz *
#         mv rootfs.tar.gz ../
#         cd ..
        
#     - name : Upload Rootfs
#       uses: actions/upload-artifact@master
#       with:
#         name: Rootfs
#         path: ./rootfs.tar.gz
