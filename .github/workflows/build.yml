
name: Build B2G-desktop

on: 
  push:
    branches:
      - b2g-desktop-ci

jobs:
  build:

    runs-on: macos-latest
    timeout-minutes: 360
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Initialization system environment
      run: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install expect  gnu-sed ccache
        ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-9 /usr/local/bin/g++
        cd /Users/runner
        hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 210g ~/android.dmg
        hdiutil attach /Users/runner/android.dmg.sparseimage -mountpoint /Volumes/android
        df -h
        
    - name: Fetch source
      run: |
        df -h
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 70G
        /usr/local/bin/ccache -s
        #export CCACHE_COMPRESS=1
        export USE_CCACHE=1
        git config --global user.name "ittat"
        git config --global user.email "ittat@github.com"
        cd /Volumes/android
        git clone  https://github.com/ReB2GOS/gecko-b2g -b gonk-mac --depth=1

        
    - name: Build B2G
      run: |
        df -h
        cd /Volumes/android/gecko-b2g
        ./mach bootstrap --no-interactive --no-system-changes --application-choice 'GeckoView/Firefox for Android'
        ./mach bootstrap --no-interactive --no-system-changes --application-choice 'Firefox for Desktop'
        brew reinstall nasm 
        brew reinstall yasm
        brew install autoconf@2.13
        MOZCONFIG=./mozconfig-b2g-desktop ./mach build
        #and run it with ./mach run
        #tar -zcvf /Volumes/android/b2gdebug.tar.gz /Volumes/android/gecko-b2g/obj-x86_64-apple-darwin18.7.0/dist/B2GDebug.app
        df -h
        
    - name : tmate
   # Install tmate on macOS or Ubuntu
      echo Setting up tmate...
      if [ -x "$(command -v brew)" ]; then
        brew install tmate > /tmp/brew.log
      fi
      if [ -x "$(command -v apt-get)" ]; then
        curl -fsSL git.io/tmate.sh | bash
      fi
      [ -e ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
      echo Running tmate...
      tmate -S /tmp/tmate.sock new-session -d
      tmate -S /tmp/tmate.sock wait tmate-ready
      # Print connection info
      DISPLAY=1
      while [ $DISPLAY -le 3 ]; do
        echo ________________________________________________________________________________
        echo To connect to this session copy-n-paste the following into a terminal or browser:
        tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
        tmate -S /tmp/tmate.sock display -p '#{tmate_web}'
        [ ! -f /tmp/keepalive ] && echo -e "After connecting you can run 'touch /tmp/keepalive' to disable the 30m timeout"
        DISPLAY=$(($DISPLAY+1))
        sleep 30
      done
      if [[ ! -z "$SLACK_WEBHOOK_URL" ]]; then
        MSG=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
        curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"\`$MSG\`\"}" $SLACK_WEBHOOK_URL
      fi
      # Wait for connection to close or timeout in 15 min
      timeout=$((30*60))
      while [ -S /tmp/tmate.sock ]; do
        sleep 1
        timeout=$(($timeout-1))
        if [ ! -f /tmp/keepalive ]; then
          if (( timeout < 0 )); then
            echo Waiting on tmate connection timed out!
            sudo init 0
            exit 0
          fi
        fi
      done
        
        
    - name : B2Gdebug.app
      uses: actions/upload-artifact@master
      with:
        name: halium-boot image
        path: /Volumes/android/b2gdebug.tar.gz
        
