name: onyx_build
on: 
  repository_dispatch:
      types: 
      - repack_aosp
      - aosp_build
      - gecko_build
      - test_build
      
env:
  SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}} 
  image: ${{github.event.client_payload.image}}  
  work: /Volumes/${{github.event.client_payload.image}} 
  action_type: ${{ github.event.action }} 

jobs: 
  Download:
    if: github.event.action == 'repack_aosp' 
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Clean system environment
      continue-on-error: true
      run: |
        df -h
        cd ~
        hdiutil detach /Volumes/android
        rm android.dmg.sparseimage

    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        rm ${image}.dmg.sparseimage
        df -h

    - name: Initialization system environment
      run: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        ####mount
        cd /Users/runner
        hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 400g ~/${image}.dmg
        ls
        hdiutil attach /Users/runner/${image}.dmg.sparseimage -mountpoint ${work}
        ####zstd
        cd ~
        git clone https://github.com/facebook/zstd.git
        cd zstd
        make
        sudo make install   
        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #####rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
           
    - name: Fetch source
      run: |
        df -h
        git config --global user.name "ittat"
        git config --global user.email "ittat@github.com"
        cd ${work}
        git clone https://github.com/b2gOS/B2G -b master  --depth=1 
        cd ./B2G
        echo Download ...
        REPO_INIT_FLAGS="--depth=1" REPO_SYNC_FLAGS=" -j128 --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune" ./config.sh onyx
        df -h


    - name: fix soucre
      run: |
        ####
        echo apply patch
        cd ${work}/B2G
        sudo rm -rf ./patcher
        git clone https://github.com/OnePlus-onyx/patcher -b test
        ./patcher/patcher.sh 
        
        ####
        cd ${work}/B2G
        sed -i '' '14d'  system/sepolicy/tests/Android.bp
                
        ####
        cd ${work}/B2G/system
        sudo rm -rf ./core
        git clone https://github.com/ReB2GOS/system_core -b gonk-onyx
        mv system_core core
        
        ####
        cd ${work}/B2G/external
        sudo rm -rf ./selinux
        git clone https://github.com/ReB2GOS/external_selinux -b aosp-10.0
        mv external_selinux selinux
        cd selinux 
        git branch test1 c4d3d93c335fbcd34b589b008ee27e5a2a590a43
        git checkout test1
        
        ####
        cd ~
        git clone https://github.com/OnePlus-onyx/build-CI -b b2g
        cd ${work}
        cp B2G/gonk-misc/Android.mk ./
        cd ${work}/B2G/gonk-misc
        git am ~/build-CI/0001-err.patch
        cd ../
        # Force compressing debug symbols
        cd build/soong
        git am ~/build-CI/0001-gz.patch
        
        ####
        df -h
        cd ${work}/B2G
        sudo rm -rf .repo
        df -h
           
    - name: repack soucre
      run: |
        hdiutil detach ${work}
        cd ~
        zstd ${image}.dmg.sparseimage
        rm ${image}.dmg.sparseimage
        ls -al ${image}.dmg.sparseimage*
        
    - name: update 
      run: |
        df -h
        rclone copy ~/${image}.dmg.sparseimage.zst itd:ci/new
        sudo rm -rf android.dmg.sparseimage.zst
        df -h
        
    - name: send aosp_build webhook          
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "aosp_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
   
   
  aosp_build:
    if: github.event.action == 'aosp_build' || github.event.action == 'test_build' 
    runs-on: macos-latest
    timeout-minutes: 360
    steps:
    - name: Send Start Notify
      run: |
        echo ${outversion}
        today=$(date +%Y-%m-%d)
        curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion} Start!"
     
    - name: Checkout
      uses: actions/checkout@v1       

    - name: Clean system environment
      continue-on-error: true
      run: |
        df -h
        cd ~
        hdiutil detach /Volumes/android
        rm android.dmg.sparseimage

    - name: Clean system environment
      continue-on-error: true
      run: |
        cd ~
        hdiutil detach ${work}
        rm ${image}.dmg.sparseimage
        df -h

    - name: Initialization system environment
      run: |
        df -h
        more /System/Library/CoreServices/SystemVersion.plist
        sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
        
        ####brew
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install expect  gnu-sed ccache coreutils
        ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-9 /usr/local/bin/g++
        
        #####zstd
        git clone https://github.com/facebook/zstd.git
        cd zstd
        make
        sudo make install 
        
        #####ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
        
        
    - name: Fetch B2G source
      run: |
        df -h
        git config --global user.name "ittat"
        git config --global user.email "ittat@github.com"
        cd ~
        rclone copy itd:ci/new/${image}.dmg.sparseimage.zst ./
        zstd --decompress  ${image}.dmg.sparseimage.zst
        sudo rm -r ./${image}.dmg.sparseimage.zst
        #####mount
        hdiutil attach /Users/runner/${image}.dmg.sparseimage -mountpoint ${work}
        df -h

    - name: move error.log
      run: |
        if [ -d "${work}/B2G/out" ];then
          ls -al ${work}/B2G/out/error*
          echo "old error.log:"
          cat ${work}/B2G/out/error.log
          sudo rm ${work}/B2G/out/error.log
          touch ${work}/B2G/out/error.log
        fi
        
    - name: build soucre
      if: github.event.action == 'aosp_build'
      continue-on-error: true
      id: build
      run: |
        df -h
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 70G
        /usr/local/bin/ccache -s
        export USE_CCACHE=1
        sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
        cd ${work}/B2G
        export DISABLE_SOURCES_XML=true
        gtimeout 275m ./build.sh -j4
        df -h

    - name: test build soucre
      if: github.event.action == 'test_build'
      run: |
        df -h
        # Download pre-build b2g-bin
        cd ${work}
        
        ####
        sudo rm -rf ./B2G/gonk-misc/Android.mk
        cp ./Android.mk ./B2G/gonk-misc/
        
        ####
        mkdir pre-gecko
        cd pre-gecko
        rclone copy itd:ci/new/b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz ./
        
        ####
        cd ${work}/B2G
        sed -i '' '437d'  build/make/tools/releasetools/ota_from_target_files.py

        sudo rm -rf ./b2g-sysroot
        
        #### test build
        export CCACHE_DIR=~/.ccache
        /usr/local/bin/ccache  -M 70G
        /usr/local/bin/ccache -s
        export USE_CCACHE=1
        sudo  mv /usr/local/bin/gsed  /usr/local/bin/sed
        cd ${work}/B2G
        export DISABLE_SOURCES_XML=true
        export USE_PREBUILT_B2G=1
        export PREFERRED_B2G="${work}/pre-gecko/b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz"
        ./build.sh -j4 dist DIST_DIR=dist_output
        ./build/tools/releasetools/ota_from_target_files dist_output/b2g_onyx-target_files-eng.runner.zip onyx_aosp_ota_update.zip
        
        ####
        rclone copy onyx_b2g_ota_update.zip itd:ci/new 
        ls -al dist_output
        ls out/target/product/onyx/system
        ls out/target/product/onyx/system/b2g
        
        cd ~
        hdiutil detach ${work}
        sudo rm ${image}.dmg.sparseimage
        df -h
        exit 124


    - name: check error.log
      id: check
      run: |
        if [ -s ${work}/B2G/out/error.log ]; then
          echo Error!
          cat ${work}/B2G/out/error.log
          today=$(date +%Y-%m-%d)
          curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.error.${{steps.name.build.exitcode}} Error!"
          cd ~
          hdiutil detach ${work}
          sudo rm -rf ${image}.dmg.sparseimage*
          df -h
          exit 2
        else
          exit 0
        fi
        
    - name: repack sysroot 
      id: sysroot
      if: steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        git clone https://github.com/OnePlus-onyx/build-CI -b b2g
        cd build-CI
        cp ./package_onyx_sysroot.sh ~/
        chmod +x ~/package_onyx_sysroot.sh
        df -h
        cd ${work}/B2G
        cp ~/package_onyx_sysroot.sh ./
        pip3 install zstandard
        pip install zstandard
        ./package_onyx_sysroot.sh
        ls -al -h b2g-sysroot.tar.zst
        mv b2g-sysroot.tar.zst ${work}
        df -h

    - name: update b2g-sysroot
      if:  steps.sysroot.conclusion == 'success' &&  steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
        cd ${work}
        rclone copy b2g-sysroot.tar.zst itd:ci/new
        sudo rm b2g-sysroot.tar.zst

    - name: reject image
      continue-on-error: true
      id: reject_img
      run: |
        cd ~
        touch ~/log.b2g
        sleep 20
        hdiutil detach ${work} > ~/log.b2g
        
    - name: reject image again
      continue-on-error: true
      id: reject_img_again
      if: steps.build.reject_img == 'failure'
      run: |
        cd ~
        cat ~/log.b2g
        sleep 20
        hdiutil detach ${work} > ~/log.b2g

    - name: repack soucre
      if: steps.check.conclusion == 'success'
      run: |
        cd ~
        zstd ${image}.dmg.sparseimage
        df -h
        
    - name: update build source
      if: steps.check.conclusion == 'success'
      run: |
        df -h
        cd ~
        rclone copy ./${image}.dmg.sparseimage.zst itd:ci/new
        df -h
        ls -al ${image}.dmg.sparseimage*
        sudo rm ${image}.dmg.sparseimage
        sudo rm  -rf ./${image}.dmg.sparseimage.zst
            
    - name: send aosp_build again
      if: steps.build.outcome == 'failure' && steps.build.conclusion == 'success'  &&  steps.check.conclusion == 'success'         
      run: |
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "aosp_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches

    - name: Send Done Notify & send build-gecko
      if: steps.check.conclusion == 'success' &&  steps.build.outcome == 'success' && steps.build.conclusion == 'success'
      run: |
       curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}.out${outversion}.exitcode.${{steps.name.build.exitcode}} Done!"
       curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "gecko_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches
   
   
  gecko_build:
    if: github.event.action == 'gecko_build'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
    - name: Send Start Notify
      run: |
        today=$(date +%Y-%m-%d)
        curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}} Start!"

    - name: Initialization system environment
      run: |
        df -h
        sudo apt install git make mercurial  yasm  libncurses5
        wget http://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.bz2
        tar xfj nasm-2.14.02.tar.bz2
        cd nasm-2.14.02/
        ./autogen.sh
        ./configure --prefix=/usr/local/ 
        make 
        sudo make install
        #hash -d nasm
        nasm -v
        cd ~
        git config --global user.name "ittat"
        git config --global user.email "ittat@github.com"
        #curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        #cargo install sccache
        #ssh
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        #rclone
        mkdir -p ~/.config/rclone
        git clone git@github.com:ittat/tmp.git
        cd tmp
        mv ./rclone.conf ~/.config/rclone
        brew install rclone
        rclone ls itd:test
        
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: Install sccache
      run: cargo install sccache

    - name: Fetch source
      run: |
        df -h
        cd ~
        #TODO
        rclone copy  itd:ci/new/b2g-sysroot.tar.zst ./
        curl https://packages.preprod.kaiostech.com/ndk/v2/mozbuild.tar.bz2 -o mozbuild.tar.bz2
        tar -xvf mozbuild.tar.bz2
        tar -C "$HOME/.mozbuild" -I zstd -x -a -f b2g-sysroot.tar.zst
        sudo rm b2g-sysroot.tar.zst
        sudo rm mozbuild.tar.bz2
        cd ~
        git clone https://github.com/kaiostech/gecko-b2g -b gonk --depth=1
        #git clone https://github.com/ittat/gecko-b2g-1 -b gonk --depth=1
        df -h
        
    - name: bootstrap source
      run: |
        df -h
        cd ~/gecko-b2g
        export SHELL=/bin/bash
        export LOCAL_NDK_BASE_URL='ftp://ftp.kaiostech.com/ndk/android-ndk'
        ./mach bootstrap --no-interactive --application-choice 'GeckoView/Firefox for Android'
        df -h
        
    - name: Build gecko
      run: |
        df -h
        cd ~/gecko-b2g
        export SHELL=/bin/bash
        export GONK_PATH=${HOME}/.mozbuild/b2g-sysroot
        export GONK_PRODUCT_NAME=onyx
        export GECKO_OBJDIR=${GONK_PATH}/objdir-onyx-gecko
        export PLATFORM_VERSION=29
        export TARGET_ARCH=arm
        export TARGET_ARCH_VARIANT=armv7-a-neon
        export TARGET_CPU_VARIANT=krait
        export MOZ_DISABLE_LTO=1
        ./build-b2g.sh
        ./build-b2g.sh package
        df -h
        ls ${GECKO_OBJDIR}/dist
         
    - name: Upload 
      if: github.event.action == 'gecko_build'
      uses: actions/upload-artifact@master
      with:
        name: b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz
        path: ~/.mozbuild/b2g-sysroot/objdir-onyx-gecko/dist/b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz

    - name: Upload 
      run: |
        df -h
        cd ~/.mozbuild/b2g-sysroot/objdir-onyx-gecko/dist
        rclone copy ./b2g-82.0a1.en-US.linux-androideabi-arm.tar.gz itd:ci/new 
        df -h
           
    - name: Send Done Notify && Send test_build
      run: |
        today=$(date +%Y-%m-%d)
        curl -X POST "https://api.telegram.org/bot${{secrets.TG_BOT_TOKEN}}/sendMessage" -d "chat_id=${{secrets.TG_GROUP_KAIOS}}&text=${today}.BuildType.${{github.event.action}}:onyx-build-gecko PASS!"
        curl -H "Authorization: token ${{secrets.GIT_ACCESS_TOKEN}}"   --request POST   --data '{"event_type": "test_build","client_payload": {"image":"'${image}'"}}'   https://api.github.com/repos/OnePlus-onyx/build-CI/dispatches

  
